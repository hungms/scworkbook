[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Single-Cell Workbook",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "<b>Preface</b>"
    ]
  },
  {
    "objectID": "index.html#motivation",
    "href": "index.html#motivation",
    "title": "Single-Cell Workbook",
    "section": "Motivation",
    "text": "Motivation\nAs bioinformatic pipelines continue to evolve and expand, this single-cell workbook serves as a comprehensive documentation of the standard analytical processes used in the Calado lab’s publications. It is designed to be a valuable reference for both internal lab members and external researchers, capturing the typical methodologies in our lab.\nBesides serving as a reference, this documentation also plays a crucial role in testing, recording, and evaluating new methodologies and the quality of their outputs. This dual purpose ensures the understanding of the strengths, pitfalls, and limitations of each analytical prediction, which together helps to generate a better gold-standard single-cell pipeline.",
    "crumbs": [
      "<b>Preface</b>"
    ]
  },
  {
    "objectID": "index.html#development",
    "href": "index.html#development",
    "title": "Single-Cell Workbook",
    "section": "Development",
    "text": "Development\nIn addition to the documentation, I developed an R package [scUnify] which consists a range of wrapper and plot functions for internal use to customize and simplify data processing and visualization pipelines provided by existing tools. These functions are designed to be in continue use for current and future lab publications, and example usages of each function is documented throughout the chapters of this workbook. Further details of the installation & dependencies of these functons can be found in [Chapter 0 : Introduction/Installations].",
    "crumbs": [
      "<b>Preface</b>"
    ]
  },
  {
    "objectID": "sections/0_introduction/0.1_installation.html",
    "href": "sections/0_introduction/0.1_installation.html",
    "title": "1  Installation",
    "section": "",
    "text": "1.1 R Dependencies",
    "crumbs": [
      "**Chapter 0 : Introduction**",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "sections/0_introduction/0.1_installation.html#python-dependencies",
    "href": "sections/0_introduction/0.1_installation.html#python-dependencies",
    "title": "1  Installation",
    "section": "1.2 Python Dependencies",
    "text": "1.2 Python Dependencies\n\n### Load scripts",
    "crumbs": [
      "**Chapter 0 : Introduction**",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "sections/0_introduction/0.2_data.html",
    "href": "sections/0_introduction/0.2_data.html",
    "title": "2  Data Description",
    "section": "",
    "text": "GSE247917",
    "crumbs": [
      "**Chapter 0 : Introduction**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Description</span>"
    ]
  },
  {
    "objectID": "sections/0_introduction/0.2_data.html#gse247917",
    "href": "sections/0_introduction/0.2_data.html#gse247917",
    "title": "2  Data Description",
    "section": "",
    "text": "Raw Data & Description\nWe have downloaded single cell omic data from 2 sequencing runs CV10, CV12 [PRJNA1040899, PRJNA1040899] from the GEO Omnibus Acession Number [GSE247917]. The dataset comprises of PBMCs taken from donors at different timepoints after receiving Sars-CoV-2 vaccinations (CV10) and/or boosters (CV12). Single cells from different donors were hashtagged (see Cell Hashing by 10X) pooled and CITEseq staining was performed to stain for several immune lineages. GEX, VDJ-T/B, HTO and ADT libraries were sequenced with 10X sequencing platform.\n\n\nProcessed Data",
    "crumbs": [
      "**Chapter 0 : Introduction**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Description</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.1_cellranger.html",
    "href": "sections/1_processing/1.1_cellranger.html",
    "title": "3  CellRanger (Multi)",
    "section": "",
    "text": "Motivation\nIntroduction to CellRanger\n## setup environment\nsuppressMessages({\nlibrary(tidyverse)\nlibrary(knitr)})\n\n## function to print contents\ncat_content &lt;- function(dir, n = -1L){\n    content &lt;- readLines(dir, n = n, warn = FALSE)\n    cat(content, sep = \"\\n\")}",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>CellRanger (Multi)</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.1_cellranger.html#retrieve-raw-sequencing-files",
    "href": "sections/1_processing/1.1_cellranger.html#retrieve-raw-sequencing-files",
    "title": "3  CellRanger (Multi)",
    "section": "3.1 Retrieve Raw Sequencing Files",
    "text": "3.1 Retrieve Raw Sequencing Files\nIn this section, we will download the relevant sequencing samples (CV10, CV12) highlighted in ?sec-Introduction with the respective BioProject ID : PRJNA1040901 & PRJNA1040899. Since the raw sequencing files are deposited in Sequencing Read Archive (SRA), we can use the SRA Toolkit to directly transfer data from cloud server to local/remote host.\n\n3.1.1 Sequencing Run Identifiers\nBefore we can proceed with the download, SRA Toolkit needs the sequencing run identifiers for each sample, which typically has a prefix starting with “SRR”. With multi-omic data, one sequencing run identifier will be generated for each sequencing library (GEX, ADT, BCR, TCR etc.). To retrieve the relevant identifiers, we downloaded the [SraRunTable.txt] file for this study from NIH SRA Run Selector.\n\nfs::dir_tree(path = \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/\", recurse = 0)\n\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/\n├── cellranger\n├── logs\n└── raw_fastq\n\n\n\nfs::dir_tree(path = \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input\")\n\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input\n├── GSE247910_ADT_HTO_details_README.txt\n├── GSE247912_ADT_HTO_details_README.txt\n├── SRR_Acc_List.txt\n└── SraRunTable.txt\n\n\nAs you can see from the SraRunTable.txt file below, sequencing run identifiers and BioProject IDs are stored in the &lt;Run&gt; and &lt;BioProject&gt; columns. Next we will get the relevant sequencing run identifiers from the SraRunTable.txt file below and store these as a .txt file.\n\n## see structure of SraRunTable.txt\nsra &lt;- read.csv(\"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input/SraRunTable.txt\", sep = \",\")\nstr(sra)\n\n'data.frame':   96 obs. of  34 variables:\n $ Run                           : chr  \"SRR26852594\" \"SRR26852595\" \"SRR26852596\" \"SRR26852597\" ...\n $ Assay.Type                    : chr  \"OTHER\" \"OTHER\" \"OTHER\" \"OTHER\" ...\n $ AvgSpotLen                    : int  160 160 152 160 160 152 161 161 128 160 ...\n $ Bases                         : num  3.98e+08 6.37e+08 4.72e+08 3.78e+09 5.25e+08 ...\n $ BioProject                    : chr  \"PRJNA1040889\" \"PRJNA1040889\" \"PRJNA1040889\" \"PRJNA1040889\" ...\n $ BioSample                     : chr  \"SAMN38270931\" \"SAMN38270932\" \"SAMN38270933\" \"SAMN38270934\" ...\n $ Bytes                         : num  1.62e+08 2.57e+08 1.94e+08 1.54e+09 2.13e+08 ...\n $ cell_type                     : chr  \"PBMCs\" \"PBMCs\" \"PBMCs\" \"PBMCs\" ...\n $ Center.Name                   : chr  \"KORALOV, PATHOLOGY, NYU LANGONE\" \"KORALOV, PATHOLOGY, NYU LANGONE\" \"KORALOV, PATHOLOGY, NYU LANGONE\" \"KORALOV, PATHOLOGY, NYU LANGONE\" ...\n $ Collection_Date               : chr  \"missing\" \"missing\" \"missing\" \"missing\" ...\n $ Consent                       : chr  \"public\" \"public\" \"public\" \"public\" ...\n $ DATASTORE.filetype            : chr  \"fastq,run.zq,sra\" \"fastq,run.zq,sra\" \"fastq,run.zq,sra\" \"fastq,run.zq,sra\" ...\n $ DATASTORE.provider            : chr  \"gs,ncbi,s3\" \"gs,ncbi,s3\" \"gs,ncbi,s3\" \"gs,ncbi,s3\" ...\n $ DATASTORE.region              : chr  \"gs.us-east1,ncbi.public,s3.us-east-1\" \"gs.us-east1,ncbi.public,s3.us-east-1\" \"gs.us-east1,ncbi.public,s3.us-east-1\" \"gs.us-east1,ncbi.public,s3.us-east-1\" ...\n $ Experiment                    : chr  \"SRX22547979\" \"SRX22547978\" \"SRX22547977\" \"SRX22547976\" ...\n $ geo_loc_name_country          : chr  \"uncalculated\" \"uncalculated\" \"uncalculated\" \"uncalculated\" ...\n $ geo_loc_name_country_continent: chr  \"uncalculated\" \"uncalculated\" \"uncalculated\" \"uncalculated\" ...\n $ geo_loc_name                  : chr  \"missing\" \"missing\" \"missing\" \"missing\" ...\n $ Instrument                    : chr  \"NextSeq 500\" \"NextSeq 500\" \"NextSeq 500\" \"NextSeq 500\" ...\n $ Library.Name                  : chr  \"GSM7902898\" \"GSM7902897\" \"GSM7902896\" \"GSM7902895\" ...\n $ library_type                  : chr  \"TCRgd\" \"TCRab\" \"HTO\" \"GEX\" ...\n $ LibraryLayout                 : chr  \"PAIRED\" \"PAIRED\" \"PAIRED\" \"PAIRED\" ...\n $ LibrarySelection              : chr  \"other\" \"other\" \"other\" \"other\" ...\n $ LibrarySource                 : chr  \"TRANSCRIPTOMIC\" \"TRANSCRIPTOMIC\" \"OTHER\" \"TRANSCRIPTOMIC\" ...\n $ Organism                      : chr  \"Homo sapiens\" \"Homo sapiens\" \"Homo sapiens\" \"Homo sapiens\" ...\n $ Platform                      : chr  \"ILLUMINA\" \"ILLUMINA\" \"ILLUMINA\" \"ILLUMINA\" ...\n $ ReleaseDate                   : chr  \"2023-11-21T00:00:00Z\" \"2023-11-21T00:00:00Z\" \"2023-11-21T00:00:00Z\" \"2023-11-21T00:00:00Z\" ...\n $ create_date                   : chr  \"2023-11-16T14:45:00Z\" \"2023-11-16T14:46:00Z\" \"2023-11-16T14:45:00Z\" \"2023-11-16T14:58:00Z\" ...\n $ version                       : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Sample.Name                   : chr  \"GSM7902898\" \"GSM7902897\" \"GSM7902896\" \"GSM7902895\" ...\n $ source_name                   : chr  \"PBMCs\" \"PBMCs\" \"PBMCs\" \"PBMCs\" ...\n $ SRA.Study                     : chr  \"SRP472368\" \"SRP472368\" \"SRP472368\" \"SRP472368\" ...\n $ tissue                        : chr  \"PBMCs\" \"PBMCs\" \"PBMCs\" \"PBMCs\" ...\n $ treatment                     : chr  \"COVID-19\" \"COVID-19\" \"COVID-19\" \"COVID-19\" ...\n\n\n\n# select CV10, CV12\nselect &lt;- c(\"PRJNA1040901\", \"PRJNA1040899\")\nsra &lt;- sra %&gt;% filter(BioProject %in% select) %&gt;% select(BioProject, Run, library_type, treatment)\nsra\n\n\nA data.frame: 10 × 4\n\n\nBioProject\nRun\nlibrary_type\ntreatment\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\nPRJNA1040901\nSRR26844707\nTCRgd\nCOVID-19\n\n\nPRJNA1040901\nSRR26844708\nTCRab\nCOVID-19\n\n\nPRJNA1040901\nSRR26844709\nGEX\nCOVID-19\n\n\nPRJNA1040901\nSRR26844710\nBCR\nCOVID-19\n\n\nPRJNA1040901\nSRR26844711\nADT\nCOVID-19\n\n\nPRJNA1040899\nSRR26844884\nTCRgd\nSARS-CoV-2 vaccine\n\n\nPRJNA1040899\nSRR26844885\nTCRab\nSARS-CoV-2 vaccine\n\n\nPRJNA1040899\nSRR26844886\nGEX\nSARS-CoV-2 vaccine\n\n\nPRJNA1040899\nSRR26844887\nBCR\nSARS-CoV-2 vaccine\n\n\nPRJNA1040899\nSRR26844888\nADT\nSARS-CoV-2 vaccine\n\n\n\n\n\n\n## store identifiers per line in a txt file\nwrite.table(sra$Run, \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input/SRR_Acc_List.txt\", col.names = F, row.names = F, quote = F)\ncat_content(\"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input/SRR_Acc_List.txt\")\n\nSRR26844707\nSRR26844708\nSRR26844709\nSRR26844710\nSRR26844711\nSRR26844884\nSRR26844885\nSRR26844886\nSRR26844887\nSRR26844888\n\n\n\n\n3.1.2 Download with SRA Toolkit\nTo download each sequencing library with run identifier, we used the fasterq-dump command from SRA Toolkit with parallelization to speed up the process of download. Adding the –split-files argument is essential for majority 10X sequencing, as downstream pipeline requires forward and reverse strand reads to be kept in separate fastq files. Below is a bash script to perform the download.\n\n## show contents of sra toolkit script\ncat_content(\"/camp/home/hungm/nemo-pipelines/datarepo/sratools/sratools.sh\")\n\n#!/bin/bash\n#SBATCH --job-name=sratools\n#SBATCH --ntasks=32\n#SBATCH --cpus-per-task=1\n#SBATCH --time=7-00:00:0\n#SBATCH --mem=200G\n#SBATCH --partition=ncpu\n#SBATCH --mail-type=END,FAIL\n#SBATCH --mail-user=matthew.hung@crick.ac.uk\n\n############## edit the following ##################\nexport accession=matthew/MH_GSE247917\nexport PRJ=/camp/home/hungm/scratch/hungm/${accession}\n#####################################################\n\nsource /camp/home/hungm/nemo-pipelines/piplog.sh\n\nwhich fasterq-dump\nmkdir -p ${PRJ}/raw_fastq/\ncd ${PRJ}/raw_fastq/\nfor i in $(cat ${PRJ}/input/SRR_Acc_List.txt);\n    do ~/.conda/envs/sratools/bin/fasterq-dump $i -e 32 --include-technical --split-files;\n    for j in i ; \n        do gzip ${i}*.fastq ; \n    done; \ndone\n\n\n\n## submit bash script to download raw fastq files\nsystem(\"cd /camp/home/hungm/nemo-pipelines/datarepo/sratools/; sbatch sratools.sh\")\n\nThe fastq files are now downloaded to the following directory.\n\nfs::dir_tree(path = \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq\")\n\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq\n├── SRR26844707_1.fastq.gz\n├── SRR26844707_2.fastq.gz\n├── SRR26844707_3.fastq.gz\n├── SRR26844708_1.fastq.gz\n├── SRR26844708_2.fastq.gz\n├── SRR26844708_3.fastq.gz\n├── SRR26844709_1.fastq.gz\n├── SRR26844709_2.fastq.gz\n├── SRR26844709_3.fastq.gz\n├── SRR26844710_1.fastq.gz\n├── SRR26844710_2.fastq.gz\n├── SRR26844710_3.fastq.gz\n├── SRR26844711_1.fastq.gz\n├── SRR26844711_2.fastq.gz\n├── SRR26844884_1.fastq.gz\n├── SRR26844884_2.fastq.gz\n├── SRR26844884_3.fastq.gz\n├── SRR26844885_1.fastq.gz\n├── SRR26844885_2.fastq.gz\n├── SRR26844885_3.fastq.gz\n├── SRR26844886_1.fastq.gz\n├── SRR26844886_2.fastq.gz\n├── SRR26844886_3.fastq.gz\n├── SRR26844887_1.fastq.gz\n├── SRR26844887_2.fastq.gz\n├── SRR26844887_3.fastq.gz\n├── SRR26844888_1.fastq.gz\n└── SRR26844888_2.fastq.gz",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>CellRanger (Multi)</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.1_cellranger.html#multi-pipeline-configurations",
    "href": "sections/1_processing/1.1_cellranger.html#multi-pipeline-configurations",
    "title": "3  CellRanger (Multi)",
    "section": "3.2 Multi-Pipeline Configurations",
    "text": "3.2 Multi-Pipeline Configurations\nWe have setup a reference pipeline/system [see GitHub] to run cellranger-multi (V7.0.1). Below are the purpose of each file :\n\n\nbatch.sh - a bash script to setup config.csv and multi.sh for each sequencing sample\nbatch_id.txt - a txt file containing names of each sequencing sample\nconfig.csv - configuration file for cellranger-multi [see cellranger-multi]\nfastqformat.sh - rename fastq files for cellranger [see cellranger fastq names]\nfeatures_reference.csv - a reference configuration file for feature barcoding [see feature barcoding)]\nlibrary.csv - a reference configuration file for config.csv [library] section\nmulti.sh - a bash script to run cellranger-multi command\ntcrgd_primers.txt - default TCR-GD primer (5P v1.1) library [see TCR-GD primers]\n\n\n\nfs::dir_tree(path = \"/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/\")\n\n/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/\n├── batch.sh\n├── batch_id.txt\n├── config.csv\n├── fastqformat.sh\n├── feature_reference.csv\n├── library.csv\n├── multi.sh\n├── readme.txt\n└── tcrgd_primers.txt\n\n\nOutline below are the steps to run cellranger-multi for multiple sequencing samples with the system :\n\n\nRename fastq files to appropriate names with “fastqformat.sh”\nSpecify sequencing sample names in “batch_id.txt” file\nSet up “config.csv” and specify paths for reference genomes\nSet correct oligo tag/sequence for “feature_reference.csv” if necesary\nSet correct library paths for “library.csv” if necesary\nModify script and run “source batch.sh” to setup scripts per sample\nFinal check and run “sbatch */multi.sh” to submit jobs\n\n\n\nStep1 - fastqformat.sh\nFor cellranger to read the fastq files properly, the names of the fastq files need modification. To do so the fastqformat.sh script does the renaming automatically for 10X fastqs downloaded from SRA.\n\n## show fastqformat.sh\ncat_content('/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/fastqformat.sh')\n\nfor file in *_1.fastq.gz; do\n  newname=$(echo \"$file\" | sed 's/_1.fastq.gz/_S1_R1_001.fastq.gz/')\n  mv \"$file\" \"$newname\"\ndone\n\nfor file in *_2.fastq.gz; do\n  newname=$(echo \"$file\" | sed 's/_2.fastq.gz/_S1_R2_001.fastq.gz/')\n  mv \"$file\" \"$newname\"\ndone\n\nfor file in *_3.fastq.gz; do\n  newname=$(echo \"$file\" | sed 's/_3.fastq.gz/_S1_I1_001.fastq.gz/')\n  mv \"$file\" \"$newname\"\ndone\n\nfor file in *_4.fastq.gz; do\n  newname=$(echo \"$file\" | sed 's/_4.fastq.gz/_S1_I2_001.fastq.gz/')\n  mv \"$file\" \"$newname\"\ndone\n\n\n\n## separate ADT libraries\nsystem(\"\n    cd /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/ \\n \n    mkdir ADT \\n \n    mv SRR26844888* ADT \\n\n    mv SRR26844711* ADT \\n\")\n\n\n## View ADT fastq R1\nsystem(\"\nzcat /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/ADT/SRR26844711_1.fastq.gz | head -n 3;\nzcat /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/ADT/SRR26844711_2.fastq.gz | head -n 3\")\n\n@SRR26844711.1 A01581:168:HCWFHDRX2:1:2101:1108:1000 length=28\nGNCCTCAAGCTTTGGTTCGTTAGCGTCT\n+SRR26844711.1 A01581:168:HCWFHDRX2:1:2101:1108:1000 length=28\nF#FFFFFFFFF:FFFFFFFFFFFFFF,,\n@SRR26844711.2 A01581:168:HCWFHDRX2:1:2101:1127:1000 length=28\n@SRR26844711.1 A01581:168:HCWFHDRX2:1:2101:1108:1000 length=90\nNAGCTCCGTCCTCCGAATCATGTTGGTAAACACGCCCATATAAGAAAACGCTAACGAACCAAAGCTTGAGGACAGATCGGAAGAGAGTCG\n+SRR26844711.1 A01581:168:HCWFHDRX2:1:2101:1108:1000 length=90\n#FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:,:FFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFF,FFFFFFFFFF,\n@SRR26844711.2 A01581:168:HCWFHDRX2:1:2101:1127:1000 length=90\n\n## execute script\nsystem(\"\n    cd /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/ADT \\n \n    source /camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/fastqformat.sh \\n \n    mv * .. \\n\n    cd /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/ \\n \n    rm -r ADT\n    \")\n\n\nzcat /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/SRR26844709_1.fastq.gz | head -n 5\nzcat /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/SRR268447_2.fastq.gz | head -n 5\nzcat /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/SRR26844710_3.fastq.gz | head -n 5\n\n@SRR26844710.1 A01581:167:HCG2TDMXY:1:1101:1262:1016 length=10\nNCAGTAACTA\n+SRR26844710.1 A01581:167:HCG2TDMXY:1:1101:1262:1016 length=10\n#F:FFFFFFF\n@SRR26844710.2 A01581:167:HCG2TDMXY:1:1101:1606:1016 length=10\n@SRR26844710.1 A01581:167:HCG2TDMXY:1:1101:1262:1016 length=28\nANGGCCATCGTTACAGAGCCTCAATCTT\n+SRR26844710.1 A01581:167:HCG2TDMXY:1:1101:1262:1016 length=28\nF#FFFFFFFFFFFFFFFFFFFFFFFFFF\n@SRR26844710.2 A01581:167:HCG2TDMXY:1:1101:1606:1016 length=28\n@SRR26844710.1 A01581:167:HCG2TDMXY:1:1101:1262:1016 length=90\nNTTTGAACACTCTAATTTTTTCAAAGTAAACGCTTCGGGCCCCGCGGGACACTCAGCTAAGAGCATCGAGGGGGCGCCGAGAGGCAAGGG\n+SRR26844710.1 A01581:167:HCG2TDMXY:1:1101:1262:1016 length=90\n#FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FF:FFFFFFFFFFFFFFFFFFFFFFFFFFFF\n@SRR26844710.2 A01581:167:HCG2TDMXY:1:1101:1606:1016 length=90\n\n## modify format fastq for GEX/VDJ\nfor file in *_2.fastq.gz; do\n  newname=$(echo \"$file\" | sed 's/_2.fastq.gz/_S1_R1_001.fastq.gz/')\n  mv \"$file\" \"$newname\"\ndone\n\nfor file in *_3.fastq.gz; do\n  newname=$(echo \"$file\" | sed 's/_3.fastq.gz/_S1_R2_001.fastq.gz/')\n  mv \"$file\" \"$newname\"\ndone\n\nfor file in *_1.fastq.gz; do\n  newname=$(echo \"$file\" | sed 's/_1.fastq.gz/_S1_I1_001.fastq.gz/')\n  mv \"$file\" \"$newname\"\ndone\n\n\n## execute script\nsystem(\"cd /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/ \\n source /camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/fastqformat.sh\")\n\n\nfs::dir_tree(path = \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq\")\n\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq\n├── SRR26844707_S1_I1_001.fastq.gz\n├── SRR26844707_S1_R1_001.fastq.gz\n├── SRR26844707_S1_R2_001.fastq.gz\n├── SRR26844708_S1_I1_001.fastq.gz\n├── SRR26844708_S1_R1_001.fastq.gz\n├── SRR26844708_S1_R2_001.fastq.gz\n├── SRR26844709_S1_I1_001.fastq.gz\n├── SRR26844709_S1_R1_001.fastq.gz\n├── SRR26844709_S1_R2_001.fastq.gz\n├── SRR26844710_S1_I1_001.fastq.gz\n├── SRR26844710_S1_R1_001.fastq.gz\n├── SRR26844710_S1_R2_001.fastq.gz\n├── SRR26844711_S1_R1_001.fastq.gz\n├── SRR26844711_S1_R2_001.fastq.gz\n├── SRR26844884_S1_I1_001.fastq.gz\n├── SRR26844884_S1_R1_001.fastq.gz\n├── SRR26844884_S1_R2_001.fastq.gz\n├── SRR26844885_S1_I1_001.fastq.gz\n├── SRR26844885_S1_R1_001.fastq.gz\n├── SRR26844885_S1_R2_001.fastq.gz\n├── SRR26844886_S1_I1_001.fastq.gz\n├── SRR26844886_S1_R1_001.fastq.gz\n├── SRR26844886_S1_R2_001.fastq.gz\n├── SRR26844887_S1_I1_001.fastq.gz\n├── SRR26844887_S1_R1_001.fastq.gz\n├── SRR26844887_S1_R2_001.fastq.gz\n├── SRR26844888_S1_R1_001.fastq.gz\n└── SRR26844888_S1_R2_001.fastq.gz\n\n\n\n\nStep2 - batch_id.txt\nSpecify sequencing sample names (CV10, CV12) in “batch_id.txt” file.\n\n## show batch_id.txt\nwrite.table(c(\"CV10\", \"CV12\"), \"/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/batch_id.txt\", col.names = F, row.names = F, quote = F)\ncat_content(\"/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/batch_id.txt\")\n\nCV10\nCV12\n\n\n\n\nStep3 - configure.csv\nSet paths for human reference genomes for GEX and VDJ libraries for “config.csv” file. This “config.csv” template file was retrieved from CellRanger config.csv and has been modified to run our pipeline. The reference genome files are required for the cellranger-multi pipeline and can be pre-installed following the steps in the build 10X reference link.\n\n\n\n\n\n\nWarning\n\n\n\nPlease do not change the number of lines in the script as this is critical for Step 5 to run properly.\n\n\n\ncat_content(\"/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/config.csv\")\n\n# This template shows the possible cellranger multi config CSV options for analyzing Single Cell Gene Expression with Feature Barcode Technology (Antibody Capture, CRISPR Guide Capture, Cell Multiplexing, Antigen Capture), Fixed RNA Profiling, or Single Cell Immune Profiling data. \n# These options cannot be used all together - see section descriptions for detail.\n# Use 'cellranger multi-template --parameters' to see descriptions of all parameters.\n# Please see cellranger multi documentation for details and experimental design-specific examples at https://www.10xgenomics.com/support.\n\n[gene-expression]\nreference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-gex-GRCh38-2020-A\n# probe-set,/path/to/probe/set, # Required, Fixed RNA Profiling only. \n# filter-probes,&lt;true|false&gt;, # Optional, Fixed RNA Profiling only. \n# r1-length,&lt;int&gt;\n# r2-length,&lt;int&gt;\n# chemistry,SC5P-R2\n# expect-cells,&lt;auto&gt;\n# force-cells,&lt;auto&gt;\n# no-secondary,&lt;true|false&gt;\n# no-bam,&lt;true|false&gt;\n# check-library-compatibility,&lt;true|false&gt;\n# target-panel,/path/to/target/panel, # Required, Targeted GEX only.\n# no-target-umi-filter,&lt;true|false&gt;, # Optional, Targeted GEX only.\n# include-introns,&lt;true|false&gt;\n# min-assignment-confidence,&lt;0.9&gt;, # Optional, Cell Multiplexing only.\n# cmo-set,/path/to/CMO/reference, # Optional, Cell Multiplexing only.\n# barcode-sample-assignment,/path/to/barcode-sample-assignment/csv, # Optional, Cell Multiplexing only.\n\n[feature] # For Feature Barcode libraries only\n\n# r1-length,&lt;int&gt;\n# r2-length,&lt;int&gt;\n\n[vdj] # For TCR and BCR libraries only\nreference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-cellranger-vdj-GRCh38-alts-ensembl-7.1.0\ninner-enrichment-primers,/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/tcrgd_primers.txt\n# inner-enrichment-primers,/path/to/primers\n# r1-length,&lt;int&gt;\n# r2-length,&lt;int&gt;\n\n[libraries]\nfastq_id,fastqs,lanes,feature_types\n\n\n# Antibody1,/path/to/fastqs,Antibody Capture\n# CRISPR1,path/to/CRISPR_fastqs,CRISPR Guide Capture\n# CMO1,/path/to/fastqs,Multiplexing Capture, # Cell Multiplexing only\n# VDJ_T1,path/to/vdj_T_fastqs,VDJ-T, # 5' Immune Profiling only\n# VDJ_T_GD1,path/to/vdj_T_GD_fastqs,VDJ-T-GD, # 5' Immune Profiling only for gamma-delta TCR\n# Antigen1,path/to/antigen_capture_fastqs,Antigen Capture #5' Antigen Capture only\n\n#[antigen-specificity] # for 5' BCR/TCR Antigen Capture only\n#control_id,mhc_allele\n#Antigen1,AG001\n#Antigen2,AG002\n\n#[samples] # for Cell Multiplexing libraries only\n#sample_id,cmo_ids\n#sample1,CMO301\n#sample2,CMO303\n\n#[samples] # for Fixed RNA Profiling multiplexed libraries only\n#sample_id,probe_barcode_ids,description\n#sample1,BC001,Control\n#sample2,BC003,Treated\n\n#reference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-gex-mm10-2020-A\n#reference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-cellranger-vdj-GRCm38-alts-ensembl-7.0.0\n#reference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-gex-GRCh38-2020-A\n#reference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-cellranger-vdj-GRCh38-alts-ensembl-7.1.0\n\n\nWe will leave the references in [feature barcode] and [libraries] as empty in the “config.csv”, as we will define these paths with “library.csv” and “feature_reference.csv” below.\n\n\nStep4 - feature_reference.csv\nNext we will set the correct oligo tag/sequence for “feature_reference.csv” for cellranger-multi to process and quantify the oligo reads properly. Below is an example of feature_reference.csv.\n\n## show example feature_reference.csv\ncat_content(\"/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/feature_reference.csv\")\n\nid,name,read,pattern,sequence,feature_type\nC0810,CD138,R2,5PNNNNNNNNNN(BC),GCGTTTGTATGTACT,Antibody Capture\nC0917,FAS,R2,5PNNNNNNNNNN(BC),CACATCGTTTGTGTA,Antibody Capture\nC0093,CD19,R2,5PNNNNNNNNNN(BC),ATCAGCCATGTCAGT,Antibody Capture\nC0103,B220,R2,5PNNNNNNNNNN(BC),CCTACACCTCATAAT,Antibody Capture\nC0557,CD38,R2,5PNNNNNNNNNN(BC),CGTATCCGTCTCCTA,Antibody Capture\nC0200,CD86,R2,5PNNNNNNNNNN(BC),CTGGATTTGTGTATC,Antibody Capture\nC0988,FITC,R2,5PNNNNNNNNNN(BC),TTTGTGTTGTGGTAC,Antibody Capture\nC0987,APC,R2,5PNNNNNNNNNN(BC),TTAACCGTCTCCCTT,Antibody Capture\nC0301,Hash1,R2,5PNNNNNNNNNN(BC),ACCCACCAGTAAGAC,Antibody Capture\nC0302,Hash2,R2,5PNNNNNNNNNN(BC),GGTCGAGAGCATTCA,Antibody Capture\n\n\nSince CITEseq & cell hashing library was prepared for the sequencing samples, information of the antibody used and their oligo sequence was retrieved from the SRA accession of this study. We will make one feature_reference.csv file for each sequencing sample to avoid mixing up, as the same hashtag oligo was used for different donors in different sequencing runs.\n\nfs::dir_tree(path = \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input\")\n\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/input\n├── GSE247910_ADT_HTO_details_README.txt\n├── GSE247912_ADT_HTO_details_README.txt\n├── SRR_Acc_List.txt\n└── SraRunTable.txt\n\n\n\n## read the downloaded feature reference files\ncv10_features &lt;- read.csv(\"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input/GSE247910_ADT_HTO_details_README.txt\", sep = \"\\t\")\ncv12_features &lt;- read.csv(\"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input/GSE247912_ADT_HTO_details_README.txt\", sep = \"\\t\")\ncolnames(cv12_features)[4] &lt;- \"HTO\" \nhead(cv10_features)\nhead(cv12_features)\n\n\nA data.frame: 6 × 6\n\n\n\nADT\nbarcode.sequence\nX\nHTO\nbarcode.sequence.1\nhashtagged.sample\n\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;lgl&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\n1\nTotalSeq?-C0145 anti-human CD103\nGACCTCATTGTGAAT\nNA\nanti-human Hashtag 1\nGTCAACTCTTTAGCG\nCV-001 d0 booster\n\n\n2\nTotalSeq?-C0155 anti-human CD107a\nCAGCCCACTGCAATA\nNA\nanti-human Hashtag 2\nTGATGGCCTATTGGG\nCV-001 d7 booster\n\n\n3\nTotalSeq?-C0061 anti-human CD117\nAGACTAATAGCTGAC\nNA\nanti-human Hashtag 3\nTTCCGCCTCTCTTTG\nCV-001 d28 booster\n\n\n4\nTotalSeq?-C0161 anti-human CD11b\nGACAAGTGATCTGCA\nNA\nanti-human Hashtag 4\nAGTAAGTTCAGCGTA\nCV-011 d120 booster\n\n\n5\nTotalSeq?-C0053 anti-human CD11c\nTACGCCTATAACTTG\nNA\n\n\n\n\n\n6\nTotalSeq?-C0064 anti-human CD123\nCTTCACTCTGTCAGG\nNA\n\n\n\n\n\n\n\n\n\nA data.frame: 6 × 6\n\n\n\nADT\nbarcode.sequence\nX\nHTO\nbarcode.sequence.1\nhashtagged.sample\n\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;lgl&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\n1\nTotalSeq?-C0145 anti-human CD103\nGACCTCATTGTGAAT\nNA\nTotalSeq?-C0251 anti-human Hashtag 1\nGTCAACTCTTTAGCG\nCV-053 d0 vax\n\n\n2\nTotalSeq?-C0155 anti-human CD107a\nCAGCCCACTGCAATA\nNA\nTotalSeq?-C0253 anti-human Hashtag 3\nTTCCGCCTCTCTTTG\nCV-053 d7 vax\n\n\n3\nTotalSeq?-C0061 anti-human CD117\nAGACTAATAGCTGAC\nNA\nTotalSeq?-C0254 anti-human Hashtag 4\nAGTAAGTTCAGCGTA\nCV-053 d21 vax\n\n\n4\nTotalSeq?-C0161 anti-human CD11b\nGACAAGTGATCTGCA\nNA\nTotalSeq?-C0255 anti-human Hashtag 5\nAAGTATCGTTTCGCA\nCV-053 d28 vax\n\n\n5\nTotalSeq?-C0053 anti-human CD11c\nTACGCCTATAACTTG\nNA\n\n\n\n\n\n6\nTotalSeq?-C0064 anti-human CD123\nCTTCACTCTGTCAGG\nNA\n\n\n\n\n\n\n\n\n\n## modify each feature reference\nfor(x in c(\"cv10_features\", \"cv12_features\")){\n    \n    features &lt;- get(x)\n    colnames(features) &lt;- NULL\n    colnames(features) &lt;- rep(c(\"id\", \"sequence\", \"name\"),2)\n    features &lt;- bind_rows(features[c(1:3)], features[c(4:6)]) %&gt;%\n        filter(id != \"\") %&gt;%\n        arrange(name)\n\n    features &lt;- features %&gt;%\n        mutate(\n            id = gsub(\" $\", \"\", id), # remove random \" \" at the end of id\n            name = gsub(\" \", \"_\", name),\n            name = ifelse(is.na(name), id, name)) %&gt;% # add citeseq id to name\n        mutate(\n            name = gsub(\".* \", \"\", name), \n            id = gsub(\".*anti-human Hashtag \", \"Hashtag\", id),\n            id = gsub(\"TotalSeq\\\\?\\\\-C\", \"C\", id),\n            id = gsub(\" .*\", \"\", id)) %&gt;%\n        mutate(\n            name = gsub(\"^isoIg\", \"Ig\", name),\n            read = \"R2\",\n            pattern = \"5PNNNNNNNNNN(BC)\",\n            feature_type = \"Antibody Capture\") %&gt;%\n        filter(id != \"\") %&gt;%\n        filter(sequence != \"\") %&gt;%\n        select(id, name, read, pattern, sequence, feature_type) %&gt;%\n        arrange(desc(id)) %&gt;%\n        distinct(.)\n    \n    print(any(is.na(features)))\n    assign(x, features)}\n\n[1] FALSE\n[1] FALSE\n\n\n\nhead(cv10_features)\nhead(cv12_features)\n\n\nA data.frame: 6 × 6\n\n\n\nid\nname\nread\npattern\nsequence\nfeature_type\n\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\n1\nHashtag4\nCV-011_d120_booster\nR2\n5PNNNNNNNNNN(BC)\nAGTAAGTTCAGCGTA\nAntibody Capture\n\n\n2\nHashtag3\nCV-001_d28_booster\nR2\n5PNNNNNNNNNN(BC)\nTTCCGCCTCTCTTTG\nAntibody Capture\n\n\n3\nHashtag2\nCV-001_d7_booster\nR2\n5PNNNNNNNNNN(BC)\nTGATGGCCTATTGGG\nAntibody Capture\n\n\n4\nHashtag1\nCV-001_d0_booster\nR2\n5PNNNNNNNNNN(BC)\nGTCAACTCTTTAGCG\nAntibody Capture\n\n\n5\nC0831\nCD138\nR2\n5PNNNNNNNNNN(BC)\nGTATAGACCAAAGCC\nAntibody Capture\n\n\n6\nC0804\nCD186\nR2\n5PNNNNNNNNNN(BC)\nGACAGTCGATGCAAC\nAntibody Capture\n\n\n\n\n\n\nA data.frame: 6 × 6\n\n\n\nid\nname\nread\npattern\nsequence\nfeature_type\n\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\n1\nHashtag5\nCV-053_d28_vax\nR2\n5PNNNNNNNNNN(BC)\nAAGTATCGTTTCGCA\nAntibody Capture\n\n\n2\nHashtag4\nCV-053_d21_vax\nR2\n5PNNNNNNNNNN(BC)\nAGTAAGTTCAGCGTA\nAntibody Capture\n\n\n3\nHashtag3\nCV-053_d7_vax\nR2\n5PNNNNNNNNNN(BC)\nTTCCGCCTCTCTTTG\nAntibody Capture\n\n\n4\nHashtag1\nCV-053_d0_vax\nR2\n5PNNNNNNNNNN(BC)\nGTCAACTCTTTAGCG\nAntibody Capture\n\n\n5\nC0831\nCD138\nR2\n5PNNNNNNNNNN(BC)\nGTATAGACCAAAGCC\nAntibody Capture\n\n\n6\nC0804\nCD186\nR2\n5PNNNNNNNNNN(BC)\nGACAGTCGATGCAAC\nAntibody Capture\n\n\n\n\n\n\n## now output the dataframes as feature_reference.csv\nfor(x in c(\"cv10_features\", \"cv12_features\")){\n    sample &lt;- gsub(\"_.*\", \"\", x)\n    write.csv(get(x), paste0(\"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input/\", toupper(sample), \"_feature_reference.csv\"), row.names = F, quote = F)}\n\n\nfs::dir_tree(path = \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input\")\n\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/input\n├── CV10_feature_reference.csv\n├── CV12_feature_reference.csv\n├── GSE247910_ADT_HTO_details_README.txt\n├── GSE247912_ADT_HTO_details_README.txt\n├── SRR_Acc_List.txt\n└── SraRunTable.txt\n\n\n\n\nStep5 - library.csv\nNow we will create library.csv files to configure the “config.csv” file for each sequencing sample. Below are the specific columns required for “library.csv”\n\n[libraries]\nfastq_id,fastqs,lanes,feature_types\n\n\n# example of library.csv\ncat_content('/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/library.csv')\n\nSRR22473100,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,Gene Expression\nSRR22473101,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,Gene Expression\nSRR22473102,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,Gene Expression\nSRR22473103,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,Gene Expression\nSRR22473104,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,Antibody Capture\nSRR22473105,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,Antibody Capture\nSRR22473106,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,Antibody Capture\nSRR22473107,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,Antibody Capture\nSRR22473108,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,VDJ-B\nSRR22473109,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,VDJ-B\nSRR22473110,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,VDJ-B\nSRR22473111,/camp/home/hungm/scratch/hungm/anqi/AX_GSE219098/raw_fastq/,any,VDJ-B\n\n\nView SRA metadata again from ?sec-sra and modify dataframe to library.csv format.\n\n# view SRA metadata again\nhead(sra)\n\n\nA data.frame: 6 × 4\n\n\n\nBioProject\nRun\nlibrary_type\ntreatment\n\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\n1\nPRJNA1040901\nSRR26844707\nTCRgd\nCOVID-19\n\n\n2\nPRJNA1040901\nSRR26844708\nTCRab\nCOVID-19\n\n\n3\nPRJNA1040901\nSRR26844709\nGEX\nCOVID-19\n\n\n4\nPRJNA1040901\nSRR26844710\nBCR\nCOVID-19\n\n\n5\nPRJNA1040901\nSRR26844711\nADT\nCOVID-19\n\n\n6\nPRJNA1040899\nSRR26844884\nTCRgd\nSARS-CoV-2 vaccine\n\n\n\n\n\n\n## modify sra metadata\nsra &lt;- sra %&gt;%\n    mutate(feature_types = case_when(\n        library_type == \"GEX\" ~ \"Gene Expression\", \n        library_type == \"ADT\" ~ \"Antibody Capture\", \n        library_type == \"BCR\" ~ \"VDJ-B\", \n        library_type == \"TCRab\" ~ \"VDJ-T\", \n        library_type == \"TCRgd\" ~ \"VDJ-T-GD\")) %&gt;%\n    mutate(\n        id = ifelse(BioProject == \"PRJNA1040901\", \"CV10\", \"CV12\"),\n        fastq_id = Run,\n        fastqs = \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\",\n        lanes = \"any\") %&gt;%\n    select(id, fastq_id, fastqs, lanes, feature_types)\nsra\n\n\nA data.frame: 10 × 5\n\n\nid\nfastq_id\nfastqs\nlanes\nfeature_types\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\nCV10\nSRR26844707\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nVDJ-T-GD\n\n\nCV10\nSRR26844708\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nVDJ-T\n\n\nCV10\nSRR26844709\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nGene Expression\n\n\nCV10\nSRR26844710\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nVDJ-B\n\n\nCV10\nSRR26844711\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nAntibody Capture\n\n\nCV12\nSRR26844884\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nVDJ-T-GD\n\n\nCV12\nSRR26844885\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nVDJ-T\n\n\nCV12\nSRR26844886\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nGene Expression\n\n\nCV12\nSRR26844887\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nVDJ-B\n\n\nCV12\nSRR26844888\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/\nany\nAntibody Capture\n\n\n\n\n\n\n## save dataframe as library.csv\noutputdir &lt;- \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input/\"\nfor(x in unique(sra$id)){\n    sra %&gt;%\n        filter(id == x) %&gt;%\n        select(!id) %&gt;%\n        write.table(., paste0(outputdir, x, \"_library.csv\"), col.names = F, row.names = F, quote = F, sep = \",\")}\n\n\nfs::dir_tree(path = \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/input/\")\n\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/input/\n├── CV10_feature_reference.csv\n├── CV10_library.csv\n├── CV12_feature_reference.csv\n├── CV12_library.csv\n├── GSE247910_ADT_HTO_details_README.txt\n├── GSE247912_ADT_HTO_details_README.txt\n├── SRR_Acc_List.txt\n└── SraRunTable.txt\n\n\n\n\nStep6 - batch.sh\nNext we will need to create and modify each individual multi.sh and config.csv file for each sequencing sample, which can be done by running the “batch.sh” script. The script will perform the following :\n&gt; 1. make a subdirectory for each sequencing sample in a pre-defined cellranger log directory. &gt; 2. copy “multi.sh” script into each sequencing sample subdirectory and modify cellranger output directory when multi.sh is ran &gt; 3. copy “config.csv” file into each sequencing sample subdirectory and add “library.csv” and “feature_reference.csv” contents to “config.csv”\n\ncat_content('/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/batch.sh')\n\nexport accession=/matthew/MH_GSE247917\n\n# setup all scripts in this cellranger log directory\nmkdir -p /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger\n\n# for each sample name in batch_id.txt\nwhile IFS= read -r id;\ndo mkdir -p /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/${id}\n\n   # copy essential files\n   cp -r /camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/multi.sh /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/${id}/\n   cp -r /camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/config.csv /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/${id}/\n   cp -r /camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/batch* /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/\n\n   # set up cellranger output directories\n   sed -i \"11s|.*|export accession=$accession|\" /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/${id}/multi.sh\n   sed -i \"12s|.*|export sample=$id|\" /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/${id}/multi.sh\n\n   # add library details from _library.csv to config.csv\n   csv1=\"/camp/home/hungm/scratch/hungm/${accession}/input/${id}_library.csv\"\n   sed -i '38r '\"$csv1\"'' /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/${id}/config.csv\n\n   # specify feature barcoding path in config.csv\n   replacement=\"reference,/camp/home/hungm/scratch/hungm/$accession/input/${id}_feature_reference.csv\"\n   sed -i \"26s|.*|$replacement|\" /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/${id}/config.csv;\ndone &lt; /camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/batch_id.txt\n\n#########################\n### batch submit jobs ###\n#########################\n# sbatch */multi.sh\n\n#while IFS= read -r id;\n#do sbatch ${id}/multi.sh;\n#done &lt; /camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/batch_id.txt\n\n#while IFS= read -r id;\n#do rm -r /camp/home/hungm/scratch/hungm/${accession}/cellranger/${id};\n#done &lt; /camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/batch_id.txt\n\n\n\n## execute batch.sh script\nsystem(\"source /camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/batch.sh\")\nfs::dir_tree(path = \"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/cellranger\")\n\n/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/cellranger\n├── CV10\n│   ├── config.csv\n│   └── multi.sh\n├── CV12\n│   ├── config.csv\n│   └── multi.sh\n├── batch.sh\n└── batch_id.txt\n\n\n\ncat_content(\"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/cellranger/CV12/config.csv\")\n\n# This template shows the possible cellranger multi config CSV options for analyzing Single Cell Gene Expression with Feature Barcode Technology (Antibody Capture, CRISPR Guide Capture, Cell Multiplexing, Antigen Capture), Fixed RNA Profiling, or Single Cell Immune Profiling data. \n# These options cannot be used all together - see section descriptions for detail.\n# Use 'cellranger multi-template --parameters' to see descriptions of all parameters.\n# Please see cellranger multi documentation for details and experimental design-specific examples at https://www.10xgenomics.com/support.\n\n[gene-expression]\nreference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-gex-GRCh38-2020-A\n# probe-set,/path/to/probe/set, # Required, Fixed RNA Profiling only. \n# filter-probes,&lt;true|false&gt;, # Optional, Fixed RNA Profiling only. \n# r1-length,&lt;int&gt;\n# r2-length,&lt;int&gt;\n# chemistry,SC5P-R2\n# expect-cells,&lt;auto&gt;\n# force-cells,&lt;auto&gt;\n# no-secondary,&lt;true|false&gt;\n# no-bam,&lt;true|false&gt;\n# check-library-compatibility,&lt;true|false&gt;\n# target-panel,/path/to/target/panel, # Required, Targeted GEX only.\n# no-target-umi-filter,&lt;true|false&gt;, # Optional, Targeted GEX only.\n# include-introns,&lt;true|false&gt;\n# min-assignment-confidence,&lt;0.9&gt;, # Optional, Cell Multiplexing only.\n# cmo-set,/path/to/CMO/reference, # Optional, Cell Multiplexing only.\n# barcode-sample-assignment,/path/to/barcode-sample-assignment/csv, # Optional, Cell Multiplexing only.\n\n[feature] # For Feature Barcode libraries only\nreference,/camp/home/hungm/scratch/hungm//matthew/MH_GSE247917/input/CV12_feature_reference.csv\n# r1-length,&lt;int&gt;\n# r2-length,&lt;int&gt;\n\n[vdj] # For TCR and BCR libraries only\nreference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-cellranger-vdj-GRCh38-alts-ensembl-7.1.0\ninner-enrichment-primers,/camp/home/hungm/nemo-pipelines/scrnaseq/cellranger/tcrgd_primers.txt\n# inner-enrichment-primers,/path/to/primers\n# r1-length,&lt;int&gt;\n# r2-length,&lt;int&gt;\n\n[libraries]\nfastq_id,fastqs,lanes,feature_types\nSRR26844884,/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/,any,VDJ-T-GD\nSRR26844885,/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/,any,VDJ-T\nSRR26844886,/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/,any,Gene Expression\nSRR26844887,/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/,any,VDJ-B\nSRR26844888,/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/raw_fastq/,any,Antibody Capture\n\n\n# Antibody1,/path/to/fastqs,Antibody Capture\n# CRISPR1,path/to/CRISPR_fastqs,CRISPR Guide Capture\n# CMO1,/path/to/fastqs,Multiplexing Capture, # Cell Multiplexing only\n# VDJ_T1,path/to/vdj_T_fastqs,VDJ-T, # 5' Immune Profiling only\n# VDJ_T_GD1,path/to/vdj_T_GD_fastqs,VDJ-T-GD, # 5' Immune Profiling only for gamma-delta TCR\n# Antigen1,path/to/antigen_capture_fastqs,Antigen Capture #5' Antigen Capture only\n\n#[antigen-specificity] # for 5' BCR/TCR Antigen Capture only\n#control_id,mhc_allele\n#Antigen1,AG001\n#Antigen2,AG002\n\n#[samples] # for Cell Multiplexing libraries only\n#sample_id,cmo_ids\n#sample1,CMO301\n#sample2,CMO303\n\n#[samples] # for Fixed RNA Profiling multiplexed libraries only\n#sample_id,probe_barcode_ids,description\n#sample1,BC001,Control\n#sample2,BC003,Treated\n\n#reference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-gex-mm10-2020-A\n#reference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-cellranger-vdj-GRCm38-alts-ensembl-7.0.0\n#reference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-gex-GRCh38-2020-A\n#reference,/camp/svc/reference/Genomics/10x/10x_transcriptomes/refdata-cellranger-vdj-GRCh38-alts-ensembl-7.1.0\n\n\n\n\nStep7 - multi.sh\nAfter confirming that all the files are properly set up, we can run the multi.sh scripts for each sequencing sample.\n\ncat_content(\"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/cellranger/CV12/multi.sh\")\n\n#!/bin/bash\n#SBATCH --job-name=cellranger-multi\n#SBATCH --ntasks=32\n#SBATCH --cpus-per-task=1\n#SBATCH --time=7-00:00:0\n#SBATCH --mem=250G\n#SBATCH --partition=ncpu\n#SBATCH --mail-type=END,FAIL\n#SBATCH --mail-user=matthew.hung@crick.ac.uk\n\nexport accession=/matthew/MH_GSE247917\nexport sample=CV12\nmkdir -p /camp/home/hungm/scratch/hungm/${accession}/cellranger\nexec &gt; /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/${sample}/multi.log 2&gt;&1\nrm -r /camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/slurm*\n\ncd /camp/home/hungm/scratch/hungm/${accession}/cellranger\nmodule load CellRanger/7.1.0\ncellranger multi --id=${sample} \\\n         --csv=/camp/home/hungm/scratch/hungm/${accession}/logs/cellranger/${sample}/config.csv \\\n                 --localmem=200 \\\n                 --localcores=30\n\n\n\n\nsystem(\"cd /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/cellranger/; sbatch CV10/multi.sh\")\nsystem(\"cd /camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/cellranger/; sbatch CV12/multi.sh\")\n\n\ncat_content(\"/camp/home/hungm/scratch/hungm/matthew/MH_GSE247917/logs/cellranger/CV12/multi.log\", n=20)\n\nMartian Runtime - v4.0.10\nServing UI at http://cn013:38301?auth=iqpNquUSp17wjSrHixYSvDF7N_9DdLUSl-8oqgz5S04\n\nRunning preflight checks (please wait)...\n2024-09-02 20:15:48 [runtime] (ready)           ID.CV12.SC_MULTI_CS.PARSE_MULTI_CONFIG\n2024-09-02 20:15:48 [runtime] (run:local)       ID.CV12.SC_MULTI_CS.PARSE_MULTI_CONFIG.fork0.chnk0.main\n2024-09-02 20:16:05 [runtime] (chunks_complete) ID.CV12.SC_MULTI_CS.PARSE_MULTI_CONFIG\n2024-09-02 20:16:05 [runtime] (ready)           ID.CV12.SC_MULTI_CS.FULL_COUNT_INPUTS.WRITE_GENE_INDEX\n2024-09-02 20:16:05 [runtime] (run:local)       ID.CV12.SC_MULTI_CS.FULL_COUNT_INPUTS.WRITE_GENE_INDEX.fork0.chnk0.main\n2024-09-02 20:16:05 [runtime] (ready)           ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_CHEMISTRY_DETECTOR._GEM_WELL_CHEMISTRY_DETECTOR.DETECT_COUNT_CHEMISTRY\n2024-09-02 20:16:05 [runtime] (run:local)       ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_CHEMISTRY_DETECTOR._GEM_WELL_CHEMISTRY_DETECTOR.DETECT_COUNT_CHEMISTRY.fork0.chnk0.main\n2024-09-02 20:16:05 [runtime] (ready)           ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_WEBSUMMARY_BUILDER.BUILD_MULTI_GRAPH_VIEW\n2024-09-02 20:16:05 [runtime] (run:local)       ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_WEBSUMMARY_BUILDER.BUILD_MULTI_GRAPH_VIEW.fork0.chnk0.main\n2024-09-02 20:16:05 [runtime] (ready)           ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_CHEMISTRY_DETECTOR._GEM_WELL_CHEMISTRY_DETECTOR.VDJ_CHEMISTRY_DETECTOR.DETECT_CHEMISTRY.fork0_fork0\n2024-09-02 20:16:05 [runtime] (run:local)       ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_CHEMISTRY_DETECTOR._GEM_WELL_CHEMISTRY_DETECTOR.VDJ_CHEMISTRY_DETECTOR.DETECT_CHEMISTRY.fork0_fork0.chnk0.main\n2024-09-02 20:16:05 [runtime] (ready)           ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_CHEMISTRY_DETECTOR._GEM_WELL_CHEMISTRY_DETECTOR.VDJ_CHEMISTRY_DETECTOR.DETECT_CHEMISTRY.fork0_fork1\n2024-09-02 20:16:05 [runtime] (run:local)       ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_CHEMISTRY_DETECTOR._GEM_WELL_CHEMISTRY_DETECTOR.VDJ_CHEMISTRY_DETECTOR.DETECT_CHEMISTRY.fork0_fork1.chnk0.main\n2024-09-02 20:16:05 [runtime] (ready)           ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_CHEMISTRY_DETECTOR._GEM_WELL_CHEMISTRY_DETECTOR.VDJ_CHEMISTRY_DETECTOR.DETECT_CHEMISTRY.fork0_fork2\n2024-09-02 20:16:05 [runtime] (run:local)       ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_CHEMISTRY_DETECTOR._GEM_WELL_CHEMISTRY_DETECTOR.VDJ_CHEMISTRY_DETECTOR.DETECT_CHEMISTRY.fork0_fork2.chnk0.main\n2024-09-02 20:16:06 [runtime] (chunks_complete) ID.CV12.SC_MULTI_CS.SC_MULTI_CORE.MULTI_WEBSUMMARY_BUILDER.BUILD_MULTI_GRAPH_VIEW",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>CellRanger (Multi)</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.1_cellranger.html#session-info",
    "href": "sections/1_processing/1.1_cellranger.html#session-info",
    "title": "3  CellRanger (Multi)",
    "section": "Session Info",
    "text": "Session Info\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.7 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /nemo/lab/caladod/working/Matthew/.conda/envs/seurat5/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.0   dplyr_1.1.4    \n [5] purrr_1.0.2     readr_2.1.4     tidyr_1.3.0     tibble_3.2.1   \n [9] ggplot2_3.5.1   tidyverse_2.0.0 knitr_1.45     \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.4      jsonlite_1.8.7    compiler_4.3.2    crayon_1.5.2     \n [5] tidyselect_1.2.0  IRdisplay_1.1     scales_1.3.0      uuid_1.1-1       \n [9] fastmap_1.1.1     IRkernel_1.3.2    R6_2.5.1          generics_0.1.3   \n[13] munsell_0.5.0     pillar_1.9.0      tzdb_0.4.0        rlang_1.1.3      \n[17] utf8_1.2.4        stringi_1.7.12    repr_1.1.6        xfun_0.41        \n[21] fs_1.6.3          timechange_0.2.0  cli_3.6.1         withr_2.5.2      \n[25] magrittr_2.0.3    digest_0.6.33     grid_4.3.2        base64enc_0.1-3  \n[29] hms_1.1.3         pbdZMQ_0.3-9      lifecycle_1.0.3   vctrs_0.6.4      \n[33] evaluate_0.23     glue_1.6.2        fansi_1.0.5       colorspace_2.1-0 \n[37] tools_4.3.2       pkgconfig_2.0.3   htmltools_0.5.6.1",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>CellRanger (Multi)</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.2_seurat.html",
    "href": "sections/1_processing/1.2_seurat.html",
    "title": "4  Seurat Object",
    "section": "",
    "text": "Motivation\nSingle cell omic analysis can be done on both R or Python. There currently exists a few packages to format, process & analyse scRNAseq data, namely Seurat (V5) [Hao et al.; 2023], Scanpy [Wolf et al.; 2018], SingleCellExperiment [Amezquita et al.; 2019], Scran [Lun et al.; 2016]. In this tutorial we will focus on using Seurat (V5) due to its comprehensive functionality to handle multimodal datasets and interoperability with other data formats. For larger datasets (&gt;100k cells), we recommend using Scanpy to speed up the processing time.\n## set up environment\nsuppressMessages({\nlibrary(scUnify)\nsetwd(\"/nemo/lab/caladod/working/Matthew/project/matthew/MH_GSE247917\")})\n\nWarning message:\n“replacing previous import ‘cowplot::get_legend’ by ‘ggpubr::get_legend’ when loading ‘scUnify’”\nWarning message:\n“replacing previous import ‘cowplot::align_plots’ by ‘patchwork::align_plots’ when loading ‘scUnify’”\nWarning message:\n“replacing previous import ‘biomaRt::select’ by ‘rstatix::select’ when loading ‘scUnify’”\nWarning message:\n“replacing previous import ‘scales::viridis_pal’ by ‘viridis::viridis_pal’ when loading ‘scUnify’”",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Seurat Object</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.2_seurat.html#import-cellranger-outputs",
    "href": "sections/1_processing/1.2_seurat.html#import-cellranger-outputs",
    "title": "4  Seurat Object",
    "section": "4.1 Import CellRanger Outputs",
    "text": "4.1 Import CellRanger Outputs\nNow we will import the outputs from cellranger-multi as a Seurat object. We will first need to specify a cellranger-multi output directory and a sample name for each sequencing run.\n\n## store a list of 10x output directories as a vector & define sample names\ndir &lt;- \"/nemo/lab/caladod/scratch/hungm/matthew/MH_GSE247917/cellranger/\"\nfiles = list.files(dir)\ndir.list &lt;- paste0(dir, files, \"/outs/per_sample_outs/\", files, \"/count/sample_filtered_feature_bc_matrix/\")\ndir.list\n\n\n'/nemo/lab/caladod/scratch/hungm/matthew/MH_GSE247917/cellranger/CV10/outs/per_sample_outs/CV10/count/sample_filtered_feature_bc_matrix/''/nemo/lab/caladod/scratch/hungm/matthew/MH_GSE247917/cellranger/CV12/outs/per_sample_outs/CV12/count/sample_filtered_feature_bc_matrix/'\n\n\nBelow is a wrapper function to make a list of Seurat objects from a list of specified cellranger-multi output directories, with sequencing names specified in the “samples” column in the Seurat object metadata. Gene expression counts will be stored in the “RNA” assay of each object. Cells with &lt; 200 nFeatures_RNA and genes expressed in &lt; 3 cells will be pre-filtered.\nIf ADT & HTO library is present (in our case yes), we can specify the argument “adt = TRUE” and “hto = TRUE” to 1) separate ADT/HTO library from GEX and 2) separate HTO library from ADT. This should result in 2 extra assays (“ADT” and “HTO”) for the Seurat objects.\n\n\n\n\n\n\nWarning\n\n\n\nIf HTO library is present, please make sure HTO feature names have the same prefix when running cellranger-multi to specify in the function below. Otherwise user have to manually separate HTO library from ADT.\n\n\n\n## build seurat object with HTO & ADT, specifying strings to separate HTO tag names from ADT tag names\nobj_list &lt;- create_seurat_object(dir = dirlist, samples = samples, hto_str = \"anti-human_Hashtag_\")\n\nfiltered_matrix_1 --- Loading Sample 1\n\nStep 1 : Adding RNA counts\n\n\n\nERROR: Error in Read10X(dir[i]): Directory provided does not exist\n\n\nFinally, a quick check if the Seurat objects are set up properly.\n\n## View seurat object list\nobj_list\n\n$filtered_matrix_1\nAn object of class Seurat \n17028 features across 7502 samples within 3 assays \nActive assay: RNA (16828 features, 0 variable features)\n 1 layer present: counts\n 2 other assays present: HTO, ADT\n\n$filtered_matrix_2\nAn object of class Seurat \n17301 features across 8227 samples within 3 assays \nActive assay: RNA (17101 features, 0 variable features)\n 1 layer present: counts\n 2 other assays present: HTO, ADT\n\n\n\n## View metadata the first seurat object\nhead(obj_list[[1]])\n\n\nA data.frame: 10 × 8\n\n\n\norig.ident\nnCount_RNA\nnFeature_RNA\nnCount_HTO\nnFeature_HTO\nnCount_ADT\nnFeature_ADT\nsamples\n\n\n\n&lt;fct&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;chr&gt;\n\n\n\n\nfiltered_matrix_1_AAACCTGAGATGCCAG-1\nSeuratProject\n3172\n1155\n1018\n6\n1148\n153\nfiltered_matrix_1\n\n\nfiltered_matrix_1_AAACCTGAGCAATATG-1\nSeuratProject\n2904\n1206\n127\n6\n1285\n158\nfiltered_matrix_1\n\n\nfiltered_matrix_1_AAACCTGAGCCACCTG-1\nSeuratProject\n3384\n1150\n566\n6\n1983\n161\nfiltered_matrix_1\n\n\nfiltered_matrix_1_AAACCTGAGGATCGCA-1\nSeuratProject\n2535\n928\n235\n6\n2667\n168\nfiltered_matrix_1\n\n\nfiltered_matrix_1_AAACCTGAGGCTAGCA-1\nSeuratProject\n6264\n1646\n419\n6\n1915\n166\nfiltered_matrix_1\n\n\nfiltered_matrix_1_AAACCTGCAAGTCTAC-1\nSeuratProject\n5994\n1772\n558\n6\n1904\n164\nfiltered_matrix_1\n\n\nfiltered_matrix_1_AAACCTGCAGAGTGTG-1\nSeuratProject\n3223\n907\n90\n6\n735\n152\nfiltered_matrix_1\n\n\nfiltered_matrix_1_AAACCTGCATCAGTCA-1\nSeuratProject\n1726\n798\n227\n6\n1007\n158\nfiltered_matrix_1\n\n\nfiltered_matrix_1_AAACCTGCATGAACCT-1\nSeuratProject\n692\n418\n577\n6\n1412\n156\nfiltered_matrix_1\n\n\nfiltered_matrix_1_AAACCTGCATTTGCCC-1\nSeuratProject\n5568\n1594\n152\n6\n3386\n169\nfiltered_matrix_1\n\n\n\n\n\n\n## View assays in first seurat object\nfor(a in names(obj_list[[1]]@assays)){\n    print(obj_list[[1]][[a]])}\n\nAssay (v5) data with 16828 features for 7502 cells\nFirst 10 features:\n AL627309.1, AL669831.5, LINC00115, FAM41C, NOC2L, KLHL17, PLEKHN1,\nAL645608.8, HES4, ISG15 \nLayers:\n counts \nAssay (v5) data with 8 features for 7502 cells\nFirst 8 features:\n anti-human-Hashtag-1-totalC, anti-human-Hashtag-2-totalC,\nanti-human-Hashtag-3-totalC, anti-human-Hashtag-4-totalC,\nanti-human-Hashtag-5-totalC, anti-human-Hashtag-6-totalC,\nanti-human-Hashtag-7-totalC, anti-human-Hashtag-8-totalC \nLayers:\n counts \nAssay (v5) data with 192 features for 7502 cells\nFirst 10 features:\n anti-human-CD80-totalC, anti-human-CD86-totalC,\nanti-human-CD274-totalC, anti-human-CD273-totalC,\nanti-human-CD275-totalC, anti-mouse-human-CD11b-totalC,\nanti-human-CD252-totalC, anti-human-CD137L-totalC,\nanti-human-CD155-totalC, anti-human-CD112-totalC \nLayers:\n counts",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Seurat Object</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.2_seurat.html#session-info",
    "href": "sections/1_processing/1.2_seurat.html#session-info",
    "title": "4  Seurat Object",
    "section": "Session Info",
    "text": "Session Info\n\n## save output of the this session\nqsave(obj_list, file = \"seurat/1_process/GSE247917_raw.qs\")\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.7 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /nemo/lab/caladod/working/Matthew/.conda/envs/seurat5/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] qs_0.26.3                   viridis_0.6.4              \n [3] viridisLite_0.4.2           ggalluvial_0.12.5          \n [5] ggnewscale_0.4.9            ggrepel_0.9.4              \n [7] UCell_2.4.0                 writexl_1.4.2              \n [9] readxl_1.4.3                wesanderson_0.3.6.9000     \n[11] ComplexHeatmap_2.16.0       cluster_2.1.4              \n[13] lmtest_0.9-40               zoo_1.8-12                 \n[15] binaryLogic_0.3.9           jaccard_0.1.0              \n[17] RColorBrewer_1.1-3          celda_1.16.1               \n[19] Matrix_1.6-1                SingleCellExperiment_1.24.0\n[21] SummarizedExperiment_1.32.0 Biobase_2.62.0             \n[23] GenomicRanges_1.54.1        GenomeInfoDb_1.38.0        \n[25] IRanges_2.36.0              S4Vectors_0.40.1           \n[27] BiocGenerics_0.48.0         MatrixGenerics_1.14.0      \n[29] matrixStats_1.0.0           ggpubr_0.6.0               \n[31] rstatix_0.7.2               gridExtra_2.3              \n[33] scales_1.3.0                clustree_0.5.0             \n[35] ggraph_2.1.0                cowplot_1.1.1              \n[37] patchwork_1.2.0             SeuratDisk_0.0.0.9021      \n[39] tonsilref.SeuratData_2.0.0  pbmcref.SeuratData_1.0.0   \n[41] pbmc3k.SeuratData_3.1.4     SeuratData_0.2.2.9001      \n[43] Seurat_5.0.0                SeuratObject_5.0.0         \n[45] sp_2.1-1                    lubridate_1.9.3            \n[47] forcats_1.0.0               stringr_1.5.0              \n[49] dplyr_1.1.4                 purrr_1.0.2                \n[51] readr_2.1.4                 tidyr_1.3.0                \n[53] tibble_3.2.1                ggplot2_3.5.1              \n[55] tidyverse_2.0.0             biomaRt_2.58.0             \n\nloaded via a namespace (and not attached):\n  [1] spatstat.sparse_3.0-3      bitops_1.0-7              \n  [3] httr_1.4.7                 doParallel_1.0.17         \n  [5] repr_1.1.6                 tools_4.3.2               \n  [7] sctransform_0.4.1          backports_1.4.1           \n  [9] utf8_1.2.4                 R6_2.5.1                  \n [11] lazyeval_0.2.2             uwot_0.1.16               \n [13] GetoptLong_1.0.5           withr_2.5.2               \n [15] prettyunits_1.2.0          progressr_0.14.0          \n [17] cli_3.6.1                  spatstat.explore_3.2-5    \n [19] fastDummies_1.7.3          enrichR_3.2               \n [21] assertive.files_0.0-2      spatstat.data_3.0-3       \n [23] ggridges_0.5.4             pbapply_1.7-2             \n [25] pbdZMQ_0.3-9               R.utils_2.12.2            \n [27] parallelly_1.36.0          WriteXLS_6.4.0            \n [29] RSQLite_2.3.2              RApiSerialize_0.1.2       \n [31] shape_1.4.6                gridGraphics_0.5-1        \n [33] generics_0.1.3             combinat_0.0-8            \n [35] ica_1.0-3                  spatstat.random_3.2-1     \n [37] car_3.1-2                  fansi_1.0.5               \n [39] abind_1.4-5                R.methodsS3_1.8.2         \n [41] lifecycle_1.0.3            carData_3.0-5             \n [43] qvalue_2.32.0              SparseArray_1.2.0         \n [45] BiocFileCache_2.10.1       Rtsne_0.16                \n [47] blob_1.2.4                 promises_1.2.1            \n [49] crayon_1.5.2               miniUI_0.1.1.1            \n [51] lattice_0.21-8             KEGGREST_1.42.0           \n [53] magick_2.8.1               pillar_1.9.0              \n [55] rjson_0.2.21               future.apply_1.11.0       \n [57] codetools_0.2-19           leiden_0.4.3              \n [59] glue_1.6.2                 data.table_1.14.8         \n [61] vctrs_0.6.4                png_0.1-8                 \n [63] spam_2.10-0                cellranger_1.1.0          \n [65] gtable_0.3.4               cachem_1.0.8              \n [67] S4Arrays_1.2.0             mime_0.12                 \n [69] RcppEigen_0.3.3.9.3        tidygraph_1.2.3           \n [71] survival_3.5-7             iterators_1.0.14          \n [73] ellipsis_0.3.2             fitdistrplus_1.1-11       \n [75] ROCR_1.0-11                nlme_3.1-163              \n [77] bit64_4.0.5                progress_1.2.2            \n [79] filelock_1.0.2             RcppAnnoy_0.0.21          \n [81] irlba_2.3.5.1              KernSmooth_2.23-22        \n [83] colorspace_2.1-0           DBI_1.1.3                 \n [85] tidyselect_1.2.0           bit_4.0.5                 \n [87] compiler_4.3.2             curl_5.1.0                \n [89] BiocNeighbors_1.18.0       hdf5r_1.3.8               \n [91] assertive.properties_0.0-5 xml2_1.3.5                \n [93] DelayedArray_0.28.0        plotly_4.10.3             \n [95] stringfish_0.16.0          rappdirs_0.3.3            \n [97] digest_0.6.33              goftest_1.2-3             \n [99] spatstat.utils_3.0-5       XVector_0.42.0            \n[101] assertive.numbers_0.0-2    htmltools_0.5.6.1         \n[103] pkgconfig_2.0.3            base64enc_0.1-3           \n[105] dbplyr_2.4.0               fastmap_1.1.1             \n[107] GlobalOptions_0.1.2        rlang_1.1.3               \n[109] htmlwidgets_1.6.2          shiny_1.7.5.1             \n[111] farver_2.1.1               jsonlite_1.8.7            \n[113] BiocParallel_1.36.0        R.oo_1.25.0               \n[115] RCurl_1.98-1.12            magrittr_2.0.3            \n[117] GenomeInfoDbData_1.2.11    dotCall64_1.1-0           \n[119] multipanelfigure_2.1.2     IRkernel_1.3.2            \n[121] munsell_0.5.0              Rcpp_1.0.11               \n[123] reticulate_1.34.0          assertive.base_0.0-9      \n[125] stringi_1.7.12             MCMCprecision_0.4.0       \n[127] zlibbioc_1.48.0            MASS_7.3-60               \n[129] plyr_1.8.9                 parallel_4.3.2            \n[131] listenv_0.9.0              deldir_1.0-9              \n[133] Biostrings_2.70.1          graphlayouts_1.0.0        \n[135] IRdisplay_1.1              splines_4.3.2             \n[137] tensor_1.5                 circlize_0.4.15           \n[139] hms_1.1.3                  igraph_1.5.1              \n[141] uuid_1.1-1                 spatstat.geom_3.2-7       \n[143] ggsignif_0.6.4             RcppHNSW_0.5.0            \n[145] reshape2_1.4.4             XML_3.99-0.14             \n[147] evaluate_0.23              RcppParallel_5.1.7        \n[149] tzdb_0.4.0                 foreach_1.5.2             \n[151] tweenr_2.0.2               httpuv_1.6.12             \n[153] RANN_2.6.1                 polyclip_1.10-6           \n[155] clue_0.3-64                future_1.33.0             \n[157] scattermore_1.2            ggforce_0.4.1             \n[159] assertive.types_0.0-3      broom_1.0.5               \n[161] xtable_1.8-4               RSpectra_0.16-1           \n[163] later_1.3.1                memoise_2.0.1             \n[165] AnnotationDbi_1.64.0       timechange_0.2.0          \n[167] globals_0.16.2",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Seurat Object</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.3_demux.html",
    "href": "sections/1_processing/1.3_demux.html",
    "title": "5  Cell Demultiplexing",
    "section": "",
    "text": "Motivation\nFor this dataset, each sample is comprised of cells from multiple patients hashtagged with a unique oligo sequence. To demultiplex which patient the cells were retrieved from, a demultiplexing algorithm must be used to quantify the oligo sequences for each cell and assign each cell to a patient. The most common approaches to date is using the HTOdemux [Stoeckius et al.; 2018] or the MULTIseqDemux [McGinnis et al.; 2019] algorithms. Besides assigning each cell back to each patient, these algorithms are able to identify homolytic/heterolytic “Doublet” and “Negative” cells based on high/multiple and low oligo counts respectively. These poor quality droplets are a common issue with droplet-based sequencing when there are multiple or no cells found in each droplet, and removal of these droplets could prevent false-positive findings.\n## set up environment\nsuppressMessages({\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/Seurat/processing.R\")\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/Seurat/plotting.R\")\nsetwd(\"/nemo/lab/caladod/working/Matthew/project/matthew/MH_GSE155224\")})\n\n## load seurat objects\nobj_list &lt;- qread(\"seurat/20240825_GSE155224_raw.qs\")\nobj_list\n\n$filtered_matrix_1\nAn object of class Seurat \n17028 features across 7502 samples within 3 assays \nActive assay: RNA (16828 features, 0 variable features)\n 1 layer present: counts\n 2 other assays present: HTO, ADT\n\n$filtered_matrix_2\nAn object of class Seurat \n17301 features across 8227 samples within 3 assays \nActive assay: RNA (17101 features, 0 variable features)\n 1 layer present: counts\n 2 other assays present: HTO, ADT",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cell Demultiplexing</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.3_demux.html#sec-calculate_gene_fractions",
    "href": "sections/1_processing/1.3_demux.html#sec-calculate_gene_fractions",
    "title": "5  Cell Demultiplexing",
    "section": "5.1 Calculate Gene Fractions",
    "text": "5.1 Calculate Gene Fractions\nBefore demultiplexing, we need to first calculate the fraction of mitochondrial, ribosomal, haemoglobin, T/B-cell recepter (TCR/BCR) and MHC reads to identify poor quality cells, which can be informative of accurate demultiplexing. The function below will perform the calculations of key parameters that identifies poor quality cells.\nPlease navigate to the next chapter &lt;Quality Control&gt; for a detailed explanation of the wrapper function, outputs, and interpretations.\n\n## calculate gene fractions (mt, rb, hb, tcr, bcr)\nfor(x in 1:length(obj_list)){\n    obj_list[[x]] &lt;- calculate_fractions(obj_list[[x]])}",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cell Demultiplexing</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.3_demux.html#inpect-hto-counts",
    "href": "sections/1_processing/1.3_demux.html#inpect-hto-counts",
    "title": "5  Cell Demultiplexing",
    "section": "5.2 Inpect HTO Counts",
    "text": "5.2 Inpect HTO Counts\nBefore demultiplexing HTO library, we will inspect and remove any redundant/low expressing hashtags. For each sample, below we will quantify 1) how many cells expresses each tag; 2) number of counts for each tag.\n\nQuantification show that Hashtag-1 and Hashtag-2 are pretty much not expressed. Indeed for these sequencing runs, the author did not tag cells with Hashtag-1 and Hashtag-2. However author did not remove these Tags during cellranger-multi processing, hence some false-positive counts.\n\n\n## Calculate how many cells expresses each tag\nmetalist &lt;- list()\nfor(x in 1:length(obj_list)){\n    metalist[[x]] &lt;- data.frame(apply(obj_list[[x]][[\"HTO\"]]$counts, 1, function(row) sum(row != 0)))\n    colnames(metalist[[x]]) &lt;- names(obj_list)[x]}\nmetalist &lt;- bind_cols(metalist)\nmetalist\n\n\nA data.frame: 8 × 2\n\n\n\nfiltered_matrix_1\nfiltered_matrix_2\n\n\n\n&lt;int&gt;\n&lt;int&gt;\n\n\n\n\nanti-human-Hashtag-1-totalC\n59\n86\n\n\nanti-human-Hashtag-2-totalC\n39\n60\n\n\nanti-human-Hashtag-3-totalC\n7234\n8044\n\n\nanti-human-Hashtag-4-totalC\n7494\n8221\n\n\nanti-human-Hashtag-5-totalC\n7485\n8212\n\n\nanti-human-Hashtag-6-totalC\n7501\n8226\n\n\nanti-human-Hashtag-7-totalC\n7501\n8224\n\n\nanti-human-Hashtag-8-totalC\n7500\n8225\n\n\n\n\n\n\n## Calculate number of counts for each tag\nmetalist &lt;- list()\nfor(x in 1:length(obj_list)){\n    metalist[[x]] &lt;- data.frame(rowSums(obj_list[[x]][[\"HTO\"]]$counts))\n    colnames(metalist[[x]]) &lt;- names(obj_list)[x]}\nmetalist &lt;- bind_cols(metalist)\nmetalist\n\n\nA data.frame: 8 × 2\n\n\n\nfiltered_matrix_1\nfiltered_matrix_2\n\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nanti-human-Hashtag-1-totalC\n60\n86\n\n\nanti-human-Hashtag-2-totalC\n40\n60\n\n\nanti-human-Hashtag-3-totalC\n93205\n118714\n\n\nanti-human-Hashtag-4-totalC\n173037\n210110\n\n\nanti-human-Hashtag-5-totalC\n93560\n120365\n\n\nanti-human-Hashtag-6-totalC\n2220085\n2496495\n\n\nanti-human-Hashtag-7-totalC\n1170763\n1525116\n\n\nanti-human-Hashtag-8-totalC\n775182\n786222\n\n\n\n\n\nWe will now remove those redundant tags from the “HTO” assay.\n\nfor(x in 1:length(obj_list)){\n    features &lt;- c(\"anti-human-Hashtag-1-totalC\", \"anti-human-Hashtag-2-totalC\")\n    obj_list[[x]] &lt;- remove_genes(obj_list[[x]], features = features, orig.assay = \"HTO\", new.assay = \"remove\")\n    obj_list[[x]][[\"remove\"]] &lt;- NULL}\n\nobj_list\n\nWarning message:\n“Different cells and/or features from existing assay HTO”\nWarning message:\n“Different cells and/or features from existing assay HTO”\n\n\n$filtered_matrix_1\nAn object of class Seurat \n17026 features across 7502 samples within 3 assays \nActive assay: HTO (6 features, 0 variable features)\n 1 layer present: counts\n 2 other assays present: RNA, ADT\n\n$filtered_matrix_2\nAn object of class Seurat \n17299 features across 8227 samples within 3 assays \nActive assay: HTO (6 features, 0 variable features)\n 1 layer present: counts\n 2 other assays present: RNA, ADT",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cell Demultiplexing</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.3_demux.html#sec-htodemux",
    "href": "sections/1_processing/1.3_demux.html#sec-htodemux",
    "title": "5  Cell Demultiplexing",
    "section": "5.3 HTODemux",
    "text": "5.3 HTODemux\nFirst we will run the the wrapper function below to demultiplex the cells with the HTODemux algorithm in default settings.\n\n## add one pseudocount to each oligo to run HTODemux without error\nfor(x in 1:length(obj_list)){\n    obj_list[[x]] &lt;- htodemux(obj_list[[x]], add.one = T)}\n\nNormalizing layer: counts\n\nNormalizing across cells\n\nCutoff for anti-human-Hashtag-3-totalC : 46 reads\n\nCutoff for anti-human-Hashtag-4-totalC : 66 reads\n\nCutoff for anti-human-Hashtag-5-totalC : 38 reads\n\nCutoff for anti-human-Hashtag-6-totalC : 122 reads\n\nCutoff for anti-human-Hashtag-7-totalC : 120 reads\n\nCutoff for anti-human-Hashtag-8-totalC : 88 reads\n\nNormalizing layer: counts\n\nNormalizing across cells\n\nCutoff for anti-human-Hashtag-3-totalC : 19 reads\n\nCutoff for anti-human-Hashtag-4-totalC : 38 reads\n\nCutoff for anti-human-Hashtag-5-totalC : 40 reads\n\nCutoff for anti-human-Hashtag-6-totalC : 119 reads\n\nCutoff for anti-human-Hashtag-7-totalC : 101 reads\n\nCutoff for anti-human-Hashtag-8-totalC : 105 reads\n\n\n\nBelow we will visualize the output from HTODemux to inspect the quality of the demultiplexing algorithm. We quantified the percentage of “Singlet”, “Doublet” and “Negative” cells (empty droplets or cells with no tags) for each sample.\n\nHTODemux is able to assign &gt; 65% of cells as “Singlets” for both samples.\n\n\n## Aggregate HTODemux output into a dataframe\nmetalist &lt;- list()\nfor(x in seq_along(obj_list)){\n    metalist[[x]] &lt;- obj_list[[x]]@meta.data}\nmetalist &lt;- bind_rows(metalist)\n\n## Quantify % of Singlet cells left from each sample\nmetalist_qc &lt;- metalist %&gt;%\n    group_by(samples, HTO_classification.global) %&gt;%\n    summarize(count = n()) %&gt;%\n    group_by(samples) %&gt;%\n    mutate(pct = count*100/sum(count)) %&gt;%\n    filter(!HTO_classification.global %in% c(\"Doublet\", \"Negative\")) %&gt;%\n    group_by(samples) %&gt;%\n    summarize(pct = sum(pct))\n    \nmetalist_qc\n\n\nA tibble: 2 × 2\n\n\nsamples\npct\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nfiltered_matrix_1\n66.27566\n\n\nfiltered_matrix_2\n69.35700\n\n\n\n\n\n\n## Visualizde % of Singlet cells left from each sample\noptions(repr.plot.width=5, repr.plot.height=4)\nmetalist %&gt;%\n    group_by(samples, HTO_classification.global) %&gt;%\n    summarize(count = n()) %&gt;%\n    group_by(samples) %&gt;%\n    mutate(pct = count*100/sum(count)) %&gt;%\n    ggplot(aes(x = samples, y = pct, fill = HTO_classification.global)) +\n    geom_col(color = \"white\") +\n    facet_wrap(~HTO_classification.global) +\n    guides(fill = guide_legend(title = \"\")) +\n    theme_bw() +\n    ylim(c(0, 100)) +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    xlab(\"\") +\n    ylab(\"Proportions (%)\") +\n    theme_border() +\n    facet_aes()\n\n\n\n\n\n\n\n\nIn addition, we can inspect different parameter below to see if “Doublet” and “Negative” cells are assigned appropriately. Low nFeature/nCount typically indicate if the droplet is empty, hence “Negative”. Vice versa, high nFeature/nCount indicate “Doublet” cells as mRNA contents in a droplet is doubled.\n\nLooking at nFeature_RNA & nCounts_RNA mainly, HTODemux assignment do accurately reflect nature of the “Negative” and “Doublet” cells in our case.\n\n\n## inspect filtering parameters for the problematic samples\noptions(repr.plot.width=20, repr.plot.height= 6)\ncols &lt;- c(\"nFeature_RNA\", \"nCount_RNA\", \"nFeature_HTO\", \"nCount_HTO\", \"pct.mt\", \"pct.rb\", \"pct.tcr\", \"pct.bcr\")\nmetalist %&gt;%\n    filter(!is.na(HTO_classification.global)) %&gt;%\n    pivot_longer(cols = all_of(cols), names_to = \"measures\", values_to = \"values\") %&gt;%\n    mutate(measures = factor(measures, cols)) %&gt;%\n    ggplot(aes(x = HTO_classification.global, y = values, fill = HTO_classification.global)) +\n    geom_violin(size = 1, scale = \"width\", bw = \"nrd0\", position=position_dodge(0.75), trim = T, drop = F, adjust = 1.5) +\n    facet_wrap(~samples + measures, scales = \"free\", ncol = 8) +\n    theme_bw() +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    guides(fill = guide_legend(title = \"\")) +\n    xlab(\"\") +\n    ylab(\"\") +\n    theme_border() +\n    facet_aes()",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cell Demultiplexing</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.3_demux.html#sec-multiseqdemux",
    "href": "sections/1_processing/1.3_demux.html#sec-multiseqdemux",
    "title": "5  Cell Demultiplexing",
    "section": "5.4 MULTIseqDemux",
    "text": "5.4 MULTIseqDemux\nNext we also will also implement MULTIseqDemux algorithm as a benchmark.\n\n## run MULTIseqDemux\nfor(x in 1:length(obj_list)){\n    obj_list[[x]] &lt;- multiseqdemux(obj_list[[x]], add.one = F)}\n\nNormalizing layer: counts\n\nNormalizing across cells\n\nNormalizing layer: counts\n\nNormalizing across cells\n\n\n\nBelow we will visualize the output from MULTIseqDemux to inspect the quality of demultiplexing. Again we quantified the percentage of “Singlet”, “Doublet” and “Negative” cells for each sample. &gt; Compared to HTODemux, all samples have &gt; 70% of cells assigned as “Singlet”.\n\n## Aggregate MULTIseqDemux output into a dataframe\nmetalist &lt;- list()\nfor(x in seq_along(obj_list)){\n    metalist[[x]] &lt;- obj_list[[x]]@meta.data}\nmetalist &lt;- bind_rows(metalist)\n\n## Quantify % of Singlet cells left from each sample\nmetalist_qc &lt;- metalist %&gt;%\n    group_by(samples, MULTI.global) %&gt;%\n    summarize(count = n()) %&gt;%\n    group_by(samples) %&gt;%\n    mutate(pct = count*100/sum(count)) %&gt;%\n    filter(!MULTI.global %in% c(\"Doublet\", \"Negative\")) %&gt;%\n    group_by(samples) %&gt;%\n    summarize(pct = sum(pct))\n\nmetalist_qc\n\n\nA tibble: 2 × 2\n\n\nsamples\npct\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n\n\n\n\nfiltered_matrix_1\n73.14050\n\n\nfiltered_matrix_2\n75.37377\n\n\n\n\n\n\n## Visualize % of Singlet cells left from each sample\noptions(repr.plot.width=5, repr.plot.height=4)\nmetalist %&gt;%\n    group_by(samples, MULTI.global) %&gt;%\n    summarize(count = n()) %&gt;%\n    group_by(samples) %&gt;%\n    mutate(pct = count*100/sum(count)) %&gt;%\n    ggplot(aes(x = samples, y = pct, fill = MULTI.global)) +\n    geom_col() +\n    facet_wrap(~MULTI.global) +\n    guides(fill = guide_legend(title = \"\")) +\n    ylim(c(0, 100)) +\n    theme_bw() +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    xlab(\"\") +\n    ylab(\"Proportions (%)\") +\n    theme_border() +\n    facet_aes()\n\n\n\n\n\n\n\n\nAgain, we can inspect different parameter below to see if “Doublet” and “Negative” cells are assigned appropriately.\n\nLooking at nFeature and nCounts again, nCounts and nFeatures of “Negative” cells are substantially lower than “Singlet” cells, wheres “Doublets” are much higher than “Singlet” cells. Compared to HTODemux, MULTIseqDemux may better capture true “Singlet” cells.\n\n\n## inspect filtering parameters for the problematic samples\noptions(repr.plot.width=20, repr.plot.height= 6)\ncols &lt;- c(\"nFeature_RNA\", \"nCount_RNA\", \"nFeature_HTO\", \"nCount_HTO\", \"pct.mt\", \"pct.rb\", \"pct.tcr\", \"pct.bcr\")\nmetalist %&gt;%\n    filter(!is.na(MULTI.global)) %&gt;%\n    pivot_longer(cols = all_of(cols), names_to = \"measures\", values_to = \"values\") %&gt;%\n    mutate(measures = factor(measures, cols)) %&gt;%\n    ggplot(aes(x = MULTI.global, y = values, fill = MULTI.global)) +\n    geom_violin(size = 1, scale = \"width\", bw = \"nrd0\", position=position_dodge(0.75), trim = T, drop = F, adjust = 1.5) +\n    facet_wrap(~samples + measures, scales = \"free\", ncol = 8) +\n    theme_bw() +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    guides(fill = guide_legend(title = \"\")) +\n    xlab(\"\") +\n    ylab(\"\") +\n    theme_border() +\n    facet_aes()",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cell Demultiplexing</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.3_demux.html#sec-evaluateoutput",
    "href": "sections/1_processing/1.3_demux.html#sec-evaluateoutput",
    "title": "5  Cell Demultiplexing",
    "section": "5.5 Evaluate Output",
    "text": "5.5 Evaluate Output\nWhen there are more than 5 HTO hashtags, we can perform a umap visualization to evaluate which method could best predict “Singlet” cells.\n\n## make sure there are more than 5 HTO tags\nnrow(obj_list[[1]][[\"HTO\"]])\nnrow(obj_list[[2]][[\"HTO\"]])\n\n6\n\n\n6\n\n\n\n## process HTO counts\nobj_list &lt;- process_hto(obj_list)\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\n\n\n\nUMAP below shows that MULTIseqDemux assigned a large cluster of cells as tags in both sequencing runs rather than “Doublet/Negative” to HTODemux. HTODemux has been suggested to predict more false-positive doublets compared to MULTIseqDemux (see GitHub & Paper)\n\n\n# set hash ID as factors\nfor(x in 1:length(obj_list)){\n    obj_list[[x]]$hash.ID &lt;- factor(obj_list[[x]]$hash.ID, levels(obj_list[[x]]$MULTI_ID))}\n\n\n## Visualize HTODemux & MULTIseqDemux assignment for filtered_matrix_1\noptions(repr.plot.width=12, repr.plot.height= 8)\nplist &lt;- list()\nplist[[length(plist) + 1]] &lt;- scUMAP(obj_list[[1]], reduction = \"umap_hto\", group.by = \"HTO_classification.global\") + ggtitle(\"HTODemux\", subtitle = \"filtered_matrix_1\" )\nplist[[length(plist) + 1]] &lt;- scUMAP(obj_list[[1]], reduction = \"umap_hto\", group.by = \"hash.ID\") + ggtitle(\"HTODemux\", subtitle = \"filtered_matrix_1\")\nplist[[length(plist) + 1]] &lt;- scUMAP(obj_list[[1]], reduction = \"umap_hto\", group.by = \"MULTI.global\") + ggtitle(\"MULTIseqDemux\", subtitle = \"filtered_matrix_1\")\nplist[[length(plist) + 1]] &lt;- scUMAP(obj_list[[1]], reduction = \"umap_hto\", group.by = \"MULTI_ID\") + ggtitle(\"MULTIseqDemux\", subtitle = \"filtered_matrix_1\")\n\nr = 2; xc = 2; yc = 6\nfor(x in seq_along(plist)){\n    plist[[x]] &lt;- plist[[x]] +\n        annotate(\"path\",\n            x=xc+r*cos(seq(0,2*pi,length.out=100)),\n            y=yc+r*sin(seq(0,2*pi,length.out=100)),\n            size = 1,\n            linetype = \"dashed\")}\n\nr = 4; xc = -2.8; yc = -3.5\nfor(x in seq_along(plist)){\n    plist[[x]] &lt;- plist[[x]] +\n        annotate(\"path\",\n            x=xc+r*cos(seq(0,2*pi,length.out=100)),\n            y=yc+r*sin(seq(0,2*pi,length.out=100)),\n            size = 1,\n            linetype = \"dashed\")}\n\nplot_grid(plotlist = plist, ncol = 2)\n\n\n\n\n\n\n\n\n\n## Visualize HTODemux & MULTIseqDemux assignment for filtered_matrix_2\noptions(repr.plot.width=12, repr.plot.height= 8)\nplist &lt;- list()\nplist[[length(plist) + 1]] &lt;- scUMAP(obj_list[[2]], reduction = \"umap_hto\", group.by = \"HTO_classification.global\") + ggtitle(\"HTODemux\", subtitle = \"filtered_matrix_2\" )\nplist[[length(plist) + 1]] &lt;- scUMAP(obj_list[[2]], reduction = \"umap_hto\", group.by = \"hash.ID\") + ggtitle(\"HTODemux\", subtitle = \"filtered_matrix_2\")\nplist[[length(plist) + 1]] &lt;- scUMAP(obj_list[[2]], reduction = \"umap_hto\", group.by = \"MULTI.global\") + ggtitle(\"MULTIseqDemux\", subtitle = \"filtered_matrix_2\")\nplist[[length(plist) + 1]] &lt;- scUMAP(obj_list[[2]], reduction = \"umap_hto\", group.by = \"MULTI_ID\") + ggtitle(\"MULTIseqDemux\", subtitle = \"filtered_matrix_2\")\n\nr = 3.5; xc = -0; yc = -3.5\nfor(x in seq_along(plist)){\n    plist[[x]] &lt;- plist[[x]] +\n        annotate(\"path\",\n            x=xc+r*cos(seq(0,2*pi,length.out=100)),\n            y=yc+r*sin(seq(0,2*pi,length.out=100)),\n            size = 1,\n            linetype = \"dashed\")}\n\nplot_grid(plotlist = plist, ncol = 2)",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cell Demultiplexing</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.3_demux.html#sec-htosignal",
    "href": "sections/1_processing/1.3_demux.html#sec-htosignal",
    "title": "5  Cell Demultiplexing",
    "section": "5.6 Separation of HTO Signal",
    "text": "5.6 Separation of HTO Signal\nFurthermore we will inspect the hashtag signal for the demultiplexed cells in both samples to determine whether HTODemux or MULTIseqDemux is better.\n\nMULTIseqDemux can separate signals from individual tags better for both sequencing runs, especially for Hashtag-8.\n\n\n## Ridge plot of each hashtag in demultiplexed cells for filtered_matrix_1\noptions(repr.plot.width=20, repr.plot.height= 8)\nRidgePlot(obj_list[[1]], assay = \"HTO\", group.by = \"hash.ID\", features = rownames(obj_list[[1]][[\"HTO\"]]), ncol = 3)\nRidgePlot(obj_list[[1]], assay = \"HTO\", group.by = \"MULTI_ID\", features = rownames(obj_list[[1]][[\"HTO\"]]), ncol = 3)\n\nPicking joint bandwidth of 0.0327\n\nPicking joint bandwidth of 0.0447\n\nPicking joint bandwidth of 0.0344\n\nPicking joint bandwidth of 0.0754\n\nPicking joint bandwidth of 0.0755\n\nPicking joint bandwidth of 0.0844\n\nPicking joint bandwidth of 0.0336\n\nPicking joint bandwidth of 0.0523\n\nPicking joint bandwidth of 0.0353\n\nPicking joint bandwidth of 0.0992\n\nPicking joint bandwidth of 0.0899\n\nPicking joint bandwidth of 0.0971\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Ridge plot of each hashtag in demultiplexed cells for filtered_matrix_2\noptions(repr.plot.width=20, repr.plot.height= 8)\nRidgePlot(obj_list[[2]], assay = \"HTO\", group.by = \"hash.ID\", features = rownames(obj_list[[2]][[\"HTO\"]]), ncol = 3)\nRidgePlot(obj_list[[2]], assay = \"HTO\", group.by = \"MULTI_ID\", features = rownames(obj_list[[2]][[\"HTO\"]]), ncol = 3)\n\nPicking joint bandwidth of 0.0303\n\nPicking joint bandwidth of 0.04\n\nPicking joint bandwidth of 0.031\n\nPicking joint bandwidth of 0.074\n\nPicking joint bandwidth of 0.0729\n\nPicking joint bandwidth of 0.0874\n\nPicking joint bandwidth of 0.0271\n\nPicking joint bandwidth of 0.0471\n\nPicking joint bandwidth of 0.0306\n\nPicking joint bandwidth of 0.0961\n\nPicking joint bandwidth of 0.0849\n\nPicking joint bandwidth of 0.089\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the following chapters, we will continue subsequent analysis using MULTIseqDemux output rather than HTODemux.",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cell Demultiplexing</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.3_demux.html#session-info",
    "href": "sections/1_processing/1.3_demux.html#session-info",
    "title": "5  Cell Demultiplexing",
    "section": "Session Info",
    "text": "Session Info\n\nqsave(obj_list, \"seurat/20240826_GSE155224_demux.qs\")\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.7 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /nemo/lab/caladod/working/Matthew/.conda/envs/seurat5/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] qs_0.26.3                   viridis_0.6.4              \n [3] viridisLite_0.4.2           ggalluvial_0.12.5          \n [5] ggnewscale_0.4.9            ggrepel_0.9.4              \n [7] UCell_2.4.0                 writexl_1.4.2              \n [9] readxl_1.4.3                wesanderson_0.3.6.9000     \n[11] ComplexHeatmap_2.16.0       cluster_2.1.4              \n[13] lmtest_0.9-40               zoo_1.8-12                 \n[15] binaryLogic_0.3.9           jaccard_0.1.0              \n[17] RColorBrewer_1.1-3          celda_1.16.1               \n[19] Matrix_1.6-1                SingleCellExperiment_1.24.0\n[21] SummarizedExperiment_1.32.0 Biobase_2.62.0             \n[23] GenomicRanges_1.54.1        GenomeInfoDb_1.38.0        \n[25] IRanges_2.36.0              S4Vectors_0.40.1           \n[27] BiocGenerics_0.48.0         MatrixGenerics_1.14.0      \n[29] matrixStats_1.0.0           ggpubr_0.6.0               \n[31] rstatix_0.7.2               gridExtra_2.3              \n[33] scales_1.3.0                clustree_0.5.0             \n[35] ggraph_2.1.0                cowplot_1.1.1              \n[37] patchwork_1.2.0             SeuratDisk_0.0.0.9021      \n[39] tonsilref.SeuratData_2.0.0  pbmcref.SeuratData_1.0.0   \n[41] pbmc3k.SeuratData_3.1.4     SeuratData_0.2.2.9001      \n[43] Seurat_5.0.0                SeuratObject_5.0.0         \n[45] sp_2.1-1                    lubridate_1.9.3            \n[47] forcats_1.0.0               stringr_1.5.0              \n[49] dplyr_1.1.4                 purrr_1.0.2                \n[51] readr_2.1.4                 tidyr_1.3.0                \n[53] tibble_3.2.1                ggplot2_3.5.1              \n[55] tidyverse_2.0.0             biomaRt_2.58.0             \n\nloaded via a namespace (and not attached):\n  [1] igraph_1.5.1               ica_1.0-3                 \n  [3] plotly_4.10.3              zlibbioc_1.48.0           \n  [5] tidyselect_1.2.0           bit_4.0.5                 \n  [7] doParallel_1.0.17          clue_0.3-64               \n  [9] lattice_0.21-8             rjson_0.2.21              \n [11] blob_1.2.4                 S4Arrays_1.2.0            \n [13] parallel_4.3.2             png_0.1-8                 \n [15] cli_3.6.1                  goftest_1.2-3             \n [17] BiocNeighbors_1.18.0       uwot_0.1.16               \n [19] curl_5.1.0                 mime_0.12                 \n [21] evaluate_0.23              leiden_0.4.3              \n [23] stringi_1.7.12             backports_1.4.1           \n [25] assertive.numbers_0.0-2    XML_3.99-0.14             \n [27] httpuv_1.6.12              AnnotationDbi_1.64.0      \n [29] magrittr_2.0.3             rappdirs_0.3.3            \n [31] splines_4.3.2              RApiSerialize_0.1.2       \n [33] ggbeeswarm_0.7.2           sctransform_0.4.1         \n [35] DBI_1.1.3                  withr_2.5.2               \n [37] assertive.base_0.0-9       tidygraph_1.2.3           \n [39] htmlwidgets_1.6.2          IRkernel_1.3.2            \n [41] labeling_0.4.3             SparseArray_1.2.0         \n [43] cellranger_1.1.0           reticulate_1.34.0         \n [45] XVector_0.42.0             timechange_0.2.0          \n [47] foreach_1.5.2              fansi_1.0.5               \n [49] data.table_1.14.8          R.oo_1.25.0               \n [51] RSpectra_0.16-1            irlba_2.3.5.1             \n [53] ggrastr_1.0.2              fastDummies_1.7.3         \n [55] gridGraphics_0.5-1         ellipsis_0.3.2            \n [57] lazyeval_0.2.2             survival_3.5-7            \n [59] scattermore_1.2            crayon_1.5.2              \n [61] RcppAnnoy_0.0.21           IRdisplay_1.1             \n [63] progressr_0.14.0           tweenr_2.0.2              \n [65] later_1.3.1                ggridges_0.5.4            \n [67] assertive.types_0.0-3      codetools_0.2-19          \n [69] base64enc_0.1-3            GlobalOptions_0.1.2       \n [71] KEGGREST_1.42.0            Rtsne_0.16                \n [73] shape_1.4.6                filelock_1.0.2            \n [75] pkgconfig_2.0.3            xml2_1.3.5                \n [77] spatstat.sparse_3.0-3      multipanelfigure_2.1.2    \n [79] xtable_1.8-4               car_3.1-2                 \n [81] plyr_1.8.9                 httr_1.4.7                \n [83] tools_4.3.2                globals_0.16.2            \n [85] beeswarm_0.4.0             broom_1.0.5               \n [87] nlme_3.1-163               dbplyr_2.4.0              \n [89] hdf5r_1.3.8                digest_0.6.33             \n [91] farver_2.1.1               tzdb_0.4.0                \n [93] reshape2_1.4.4             WriteXLS_6.4.0            \n [95] glue_1.6.2                 cachem_1.0.8              \n [97] BiocFileCache_2.10.1       polyclip_1.10-6           \n [99] generics_0.1.3             Biostrings_2.70.1         \n[101] parallelly_1.36.0          RcppHNSW_0.5.0            \n[103] carData_3.0-5              pbapply_1.7-2             \n[105] assertive.properties_0.0-5 spam_2.10-0               \n[107] utf8_1.2.4                 assertive.files_0.0-2     \n[109] graphlayouts_1.0.0         ggsignif_0.6.4            \n[111] RcppEigen_0.3.3.9.3        shiny_1.7.5.1             \n[113] GenomeInfoDbData_1.2.11    R.utils_2.12.2            \n[115] RCurl_1.98-1.12            memoise_2.0.1             \n[117] R.methodsS3_1.8.2          future_1.33.0             \n[119] RANN_2.6.1                 stringfish_0.16.0         \n[121] spatstat.data_3.0-3        spatstat.utils_3.0-5      \n[123] hms_1.1.3                  fitdistrplus_1.1-11       \n[125] munsell_0.5.0              colorspace_2.1-0          \n[127] rlang_1.1.3                dotCall64_1.1-0           \n[129] ggforce_0.4.1              circlize_0.4.15           \n[131] iterators_1.0.14           abind_1.4-5               \n[133] MCMCprecision_0.4.0        repr_1.1.6                \n[135] bitops_1.0-7               promises_1.2.1            \n[137] RSQLite_2.3.2              qvalue_2.32.0             \n[139] DelayedArray_0.28.0        pbdZMQ_0.3-9              \n[141] compiler_4.3.2             prettyunits_1.2.0         \n[143] listenv_0.9.0              Rcpp_1.0.11               \n[145] enrichR_3.2                tensor_1.5                \n[147] MASS_7.3-60                progress_1.2.2            \n[149] uuid_1.1-1                 BiocParallel_1.36.0       \n[151] spatstat.random_3.2-1      R6_2.5.1                  \n[153] fastmap_1.1.1              vipor_0.4.5               \n[155] ROCR_1.0-11                gtable_0.3.4              \n[157] KernSmooth_2.23-22         miniUI_0.1.1.1            \n[159] deldir_1.0-9               htmltools_0.5.6.1         \n[161] RcppParallel_5.1.7         bit64_4.0.5               \n[163] spatstat.explore_3.2-5     lifecycle_1.0.3           \n[165] vctrs_0.6.4                spatstat.geom_3.2-7       \n[167] future.apply_1.11.0        pillar_1.9.0              \n[169] magick_2.8.1               combinat_0.0-8            \n[171] jsonlite_1.8.7             GetoptLong_1.0.5",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Cell Demultiplexing</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.4_doublets.html",
    "href": "sections/1_processing/1.4_doublets.html",
    "title": "6  Doublet Detection",
    "section": "",
    "text": "Motivation\nSimilar to flow cytometry, a common issue with droplet-based single cell sequencing is the capture of multiple cells in a single droplet. The rate of doublet formation depends on the sequencing platform and the number of cells loaded. Below is a reference of doublet detection rate depending on no. of cells loaded during single-cell sequencing with the 10X chromium platform.\nRemoving doublets is an important step in single-cell analysis to prevent false-positive findings. In the previous chapter, cell multiplexing with hashtag oligo is an effective method to identify and remove homolytic and heterolytic “Doublets”, however this requires sequencing of hashtag library which could be costly.\nTo overcome this issue there currently exists a few methods to identify “Doublets” based on mRNA expression, including DoubletFinder [McGinnis et al.; 2019], scDblFinder [Germain et al, 2022], Scrublet [Wolock et al.; 2019] etc. Many of these algorithms require users to process and cluster the cells prior to doublet prediction, as the identification process typically involves comparing the expressions from each cell to the pseudobulk expression profile of each cluster. These algorithms are effective in predicting heterolytic doublets, as detection works best when the pseudobulk profiles of the clusters are massively different. The pitfall, however, is that when you have a homogenous samples (i.e. FACS-sorted B-/Plasma cells) comprised of homolytic doublets, these detection algorithms may not generate accurate doublet predictions as the pseudobulk profiles of each cluster are similar.\n## set up environment\nsuppressMessages({\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/Seurat/processing.R\")\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/Seurat/plotting.R\")\nsetwd(\"/nemo/lab/caladod/working/Matthew/project/matthew/MH_GSE155224\")})\n\n## load seurat objects\nobj_list &lt;- qread(\"seurat/20240826_GSE155224_demux.qs\")\n## inspect seurat objects\nobj_list\n\n$filtered_matrix_1\nAn object of class Seurat \n17026 features across 7502 samples within 3 assays \nActive assay: HTO (6 features, 0 variable features)\n 3 layers present: counts, data, scale.data\n 2 other assays present: RNA, ADT\n 2 dimensional reductions calculated: pca_hto, umap_hto\n\n$filtered_matrix_2\nAn object of class Seurat \n17299 features across 8227 samples within 3 assays \nActive assay: HTO (6 features, 0 variable features)\n 3 layers present: counts, data, scale.data\n 2 other assays present: RNA, ADT\n 2 dimensional reductions calculated: pca_hto, umap_hto",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Doublet Detection</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.4_doublets.html#motivation",
    "href": "sections/1_processing/1.4_doublets.html#motivation",
    "title": "6  Doublet Detection",
    "section": "",
    "text": "10x Sequencing Doublet Detection Rate\n\n\n\n\n\nIn our case, our data consist of innate and adaptive immune cells where gene expressions of the major lineages are very different. We will therefore predict doublets using DoubletFinder and scDblFinder to see if it provides addition benefit to remove potential heterolytic doublets. Refering to the table above, each of the samples have ~8k cells captured, therefore doublet rate is 6.4%.",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Doublet Detection</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.4_doublets.html#sec-calculate_gene_fractions",
    "href": "sections/1_processing/1.4_doublets.html#sec-calculate_gene_fractions",
    "title": "6  Doublet Detection",
    "section": "6.1 Calculate Gene Fractions",
    "text": "6.1 Calculate Gene Fractions\nThe function below will perform the calculations of key quality control parameters for every cell but will not filter any cells yet. This is done by calculating the no. of selected reads over the no. of total reads for every cell.\n\n# run calculate gene fractions if haven't done so already\nobj &lt;- calculate_fractions(obj)",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Doublet Detection</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.4_doublets.html#preprocessing",
    "href": "sections/1_processing/1.4_doublets.html#preprocessing",
    "title": "6  Doublet Detection",
    "section": "6.2 Preprocessing",
    "text": "6.2 Preprocessing\nAs mentioned above, we will begin by processing these 2 sequencing runs by merging the seurat objects together and define cell clusters prior to doublet detection.\n\n## merge seurat objects together\nobj &lt;- merge(obj_list[[1]], obj_list[2:length(obj_list)])\nDefaultAssay(obj) &lt;- \"RNA\"\nobj[[\"RNA\"]] &lt;- JoinLayers(obj[[\"RNA\"]])\nobj\n\nAn object of class Seurat \n17895 features across 15729 samples within 3 assays \nActive assay: RNA (17697 features, 0 variable features)\n 1 layer present: counts\n 2 other assays present: HTO, ADT\n\n\nThe wrapper function below will perform library normalization (log1p), feature selection, scaling, principal component analysis (PCA), batch-correction with Harmony (optional), Louvain clustering (res = 0.4) and UMAP projection.\n\n## Run seurat processing steps\noptions(repr.plot.width=5, repr.plot.height= 4)\nobj &lt;- process_seurat(obj, dims = 1:10, harmony = T, group.by.vars = \"samples\")\n\nFinding variable features for layer counts\n\nTransposing data matrix\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Doublet Detection</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.4_doublets.html#scdblfinder",
    "href": "sections/1_processing/1.4_doublets.html#scdblfinder",
    "title": "6  Doublet Detection",
    "section": "6.3 scDblFinder",
    "text": "6.3 scDblFinder\nWe will first perform doublet detection with scDblFinder with the wrapper function below. The function will convert Seurat to SingleCellExperiment (SCE) object, run scDblFinder pipeline, and return a Seurat object with scDblFinder outputs stored in Seurat metadata. User can also specify cell demultiplexing results in the &lt;truth&gt; argument where the function will input “Singlet” and “Doublet” cells solely for doublet detection.\n\n\n\n\n\n\nWarning\n\n\n\nIn the case where only certain samples have cell multiplex libraries, users will need to set any “NA” values to “Singlets” for the wrapper function to run properly.\n\n\n\nIn the run_scdblfinder() function, we specified cluster labels (“seurat_clusters”), sequencing runs (“samples”), doublet detection rate of 6.4% (dbr) and truth (“MULTI.global”).\n\n\n## convert to sce and run scDblFinder\nobj &lt;- run_scdblfinder(obj, clusters = \"seurat_clusters\", samples = \"samples\", truth = \"MULTI.global\", dbr=0.064, ncores = 30)\n\nWarning message:\n“Assay RNA changing from Assay5 to Assay”\n\n\nBelow we visualize the outputs of scDblFinder with MULTIseqDemux cell demultiplexing outputs and known characteristics of doublets (high nCount_RNA/HTO).\n\n## visualize scDblFinder output\noptions(repr.plot.width=18, repr.plot.height= 4)\nplist &lt;- list(scUMAP(obj, reduction = \"umap\", group.by = \"scDblFinder\") + ggtitle(\"scDblFinder\"))\nplist[[2]] &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"MULTI.global\") + ggtitle(\"MULTIseqDemux\")\nplist[3:4] &lt;- scFeaturePlot(obj, reduction = \"umap\", features = c(\"nCount_RNA\", \"nCount_HTO\"), ncol = 2)\nplot_grid(plotlist = plist, ncol = 4)\n\n\n\n\n\n\n\n\n\nCompare to the cell demultiplexing outputs, scDblFinder detects and extra 926 doublets based on transcriptomic profile.\n\n\n## compare cell multiplexing output (truth) to scDblFinder output (call)\ntable(truth=obj$MULTI.global, call=obj$scDblFinder)\n\n          call\ntruth      Doublet Singlet\n  Doublet      213     409\n  Negative       0       0\n  Singlet      929   10759\n\n\n\nscDblFinder found 7.2% doublets (1139 cells) across the 2 sequencing runs.\n\n\n## no. / percentage of doublets\nno &lt;- length(which(obj$scDblFinder == \"Doublet\"))\nno\npaste0(round(no*100/ncol(obj), 1), \"%\")\n\n1142\n\n\n'7.3%'\n\n\nVisualizing quality control parameters for singlets and doublets detected by scDblFinder.\n\nDoublets detected have higher nFeature_RNA & nCount_RNA than singlets, reflecting the nature of true doublets.\n\n\n## Visualize qc metrics for doublets detected by scDblFinder\noptions(repr.plot.width=16, repr.plot.height= 6)\ncols &lt;- c(\"nFeature_RNA\", \"nCount_RNA\", \"nFeature_HTO\", \"nCount_HTO\", \"pct.mt\", \"pct.rb\", \"pct.tcr\", \"pct.bcr\")\nobj@meta.data %&gt;%\n    pivot_longer(cols = all_of(cols), names_to = \"measures\", values_to = \"values\") %&gt;%\n    mutate(measures = factor(measures, cols)) %&gt;%\n    filter(!is.na(scDblFinder)) %&gt;%\n    ggplot(aes(x = scDblFinder, y = values, fill = scDblFinder)) +\n    geom_violin(size = 1, scale = \"width\", bw = \"nrd0\", position=position_dodge(0.75), trim = T, drop = F, adjust = 1.5) +\n    facet_wrap(~samples + measures, scales = \"free\", ncol = 8) +\n    theme_bw() +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    guides(fill = guide_legend(title = \"\")) +\n    xlab(\"\") +\n    ylab(\"\") +\n    theme_border() +\n    facet_aes()",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Doublet Detection</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.4_doublets.html#doubletfinder",
    "href": "sections/1_processing/1.4_doublets.html#doubletfinder",
    "title": "6  Doublet Detection",
    "section": "6.4 DoubletFinder",
    "text": "6.4 DoubletFinder\nContinuing from scDblFinder, we will split the merged Seurat object into a list of objects by sequencing runs in order to perform the DoubletFinder pipeline. In DoubletFinder, an optional argument available is take into consideration of the cell demultiplexing outputs during doublet detection and adjust for the no. of extra heterolytic doublets detected. This can be specified in the argument &lt;truth&gt; in the wrapper function below. The wrapper function will estimate an optimal pK value that is less than 0.1 (see https://github.com/chris-mcginnis-ucsf/DoubletFinder/issues/62) to perform doublet detection.\n\nIn the run_doubletfinder() function, we specified cluster labels (“seurat_clusters”), cell demultiplexing output (“MUTLI.global”), no. of PC used (1:10) and doublet detection rate of 6.4% (dbr).\n\n\n## split seurat object by sequencing run and run doubletfinder\noptions(repr.plot.width=6, repr.plot.height= 4)\nobj_list &lt;- SplitObject(obj, split.by = \"samples\")\nfor(x in 1:length(obj_list)){\n    obj_list[[x]] &lt;- run_doubletfinder(\n        obj_list[[x]], \n        dims = 1:10, \n        truth = \"MULTI.global\", \n        cluster = \"seurat_clusters\", \n        dbr = 0.064, \n        ncores = 30)}\n\nStep 1 : Filter singlet and doublet from ground truth\n\nValue of top pK is 0.1\n\nStep 2 : Estimate Doublets\n\nNormalizing layer: counts\n\nFinding variable features for layer counts\n\nCentering and scaling data matrix\n\nStep 1 : Filter singlet and doublet from ground truth\n\nValue of top pK is 0.005\n\nStep 2 : Estimate Doublets\n\nNormalizing layer: counts\n\nFinding variable features for layer counts\n\nCentering and scaling data matrix\n\n\n\nNULL\n[1] \"Creating 1922 artificial doublets...\"\n[1] \"Creating Seurat object...\"\n[1] \"Normalizing Seurat object...\"\n[1] \"Finding variable genes...\"\n[1] \"Scaling data...\"\n[1] \"Running PCA...\"\n[1] \"Calculating PC distance matrix...\"\n[1] \"Computing pANN...\"\n[1] \"Classifying doublets..\"\nNULL\n[1] \"Creating 2182 artificial doublets...\"\n[1] \"Creating Seurat object...\"\n[1] \"Normalizing Seurat object...\"\n[1] \"Finding variable genes...\"\n[1] \"Scaling data...\"\n[1] \"Running PCA...\"\n[1] \"Calculating PC distance matrix...\"\n[1] \"Computing pANN...\"\n[1] \"Classifying doublets..\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## merge seurat objects back to a single seurat object\nobj &lt;- merge(obj_list[[1]], obj_list[2:length(obj_list)])\nDefaultAssay(obj) &lt;- \"RNA\"\nobj[[\"RNA\"]] &lt;- JoinLayers(obj[[\"RNA\"]])\nobj\n\nAn object of class Seurat \n17895 features across 15729 samples within 3 assays \nActive assay: RNA (17697 features, 2000 variable features)\n 3 layers present: scale.data, data, counts\n 2 other assays present: HTO, ADT\n\n\n\n## repeat seurat processing as scDblFinder\noptions(repr.plot.width=5, repr.plot.height= 4)\nobj &lt;- process_seurat(obj, dims = 1:10, harmony = T, group.by.vars = \"samples\")\n\nFinding variable features for layer counts\n\nTransposing data matrix\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBelow we visualize the outputs of DoubletFinder with MULTIseqDemux cell demultiplexing outputs and known characteristics of doublets (high nCount_RNA/HTO).\n\n## Visualize doubletfinder output with multiseq demux and nCount_RNA/HTO\noptions(repr.plot.width=18, repr.plot.height= 4)\nplist &lt;- list(scUMAP(obj, reduction = \"umap\", group.by = \"DoubletFinder\") + ggtitle(\"DoubletFinder\"))\nplist[[2]] &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"MULTI.global\") + ggtitle(\"MULTIseqDemux\")\nplist[3:4] &lt;- scFeaturePlot(obj, reduction = \"umap\", features = c(\"nCount_RNA\", \"nCount_HTO\"), ncol = 2)\nplot_grid(plotlist = plist, ncol = 4)\n\n\n\n\n\n\n\n\n\nCompare to the cell demultiplexing outputs, DoubletFinder detects and extra 745 doublets based on transcriptomic profile.\n\n\n## Compare cell multiplexing output (truth) to doubletfinder output (call)\ntable(truth=obj$MULTI.global, call=obj$DoubletFinder)\n\n          call\ntruth      Doublet Singlet\n  Doublet      135     487\n  Negative       0       0\n  Singlet      745   10943\n\n\n\nDoubletFinder found 5.6% doublets (880 cells) across the 2 sequencing runs.\n\n\n## no. / percentage of doublets\nno &lt;- length(which(obj$DoubletFinder == \"Doublet\"))\nno\npaste0(round(no*100/ncol(obj), 1), \"%\")\n\n880\n\n\n'5.6%'\n\n\nVisualizing quality control parameters for singlets and doublets detected by DoubletFinder.\n\nSimilar to scDblFinder, doublets detected in DoubletFinder have higher nFeature_RNA & nCount_RNA than singlets, reflecting the nature of true doublets.\n\n\n## Visualize qc metrics for doublets detected by DoubletFinder\noptions(repr.plot.width=16, repr.plot.height= 6)\ncols &lt;- c(\"nFeature_RNA\", \"nCount_RNA\", \"nFeature_HTO\", \"nCount_HTO\", \"pct.mt\", \"pct.rb\", \"pct.tcr\", \"pct.bcr\")\nobj@meta.data %&gt;%\n    filter(!is.na(DoubletFinder)) %&gt;%\n    pivot_longer(cols = all_of(cols), names_to = \"measures\", values_to = \"values\") %&gt;%\n    mutate(measures = factor(measures, cols)) %&gt;%\n    ggplot(aes(x = DoubletFinder, y = values, fill = DoubletFinder)) +\n    geom_violin(size = 1, scale = \"width\", bw = \"nrd0\", position=position_dodge(0.75), trim = T, drop = F, adjust = 1.5) +\n    facet_wrap(~samples + measures, scales = \"free\", ncol = 8) +\n    theme_bw() +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    guides(fill = guide_legend(title = \"\")) +\n    xlab(\"\") +\n    ylab(\"\") +\n    theme_border() +\n    facet_aes()",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Doublet Detection</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.4_doublets.html#tb-cell-doublets",
    "href": "sections/1_processing/1.4_doublets.html#tb-cell-doublets",
    "title": "6  Doublet Detection",
    "section": "6.5 T/B-cell Doublets",
    "text": "6.5 T/B-cell Doublets\nT/B-cells represent the most abundant of immune cell populations and have a high chance to be sequenced together as doublets. T and B-cells can be characterized by TCR-VDJ and BCR-VDJ gene expression respectively, the TCR/BCR expressions are mutually exclusive. Therefore T/B-cell doublets can be manually identified and removed if the TCR/BCR fraction is high.\n\n## visualize BCR/TCR read fractions\noptions(repr.plot.width=9, repr.plot.height= 4)\np1 &lt;- obj@meta.data %&gt;%\n    ggplot(aes(x = pct.tcr, y = pct.bcr)) +\n    geom_point() +\n    theme_border() +\n    geom_hline(yintercept = 5) +\n    geom_vline(xintercept = 0.05) +\n    xlab(\"TCR Fraction\") +\n    ylab(\"BCR Fraction\")\np2 &lt;- obj@meta.data %&gt;%\n    ggplot(aes(x = log10(pct.tcr), y = log10(pct.bcr))) +\n    geom_point() +\n    theme_border() +\n    geom_hline(yintercept = log10(5)) +\n    geom_vline(xintercept = log10(0.05)) +\n    xlab(\"log10(TCR Fraction)\") +\n    ylab(\"log10(BCR Fraction)\")\np1 + p2\n\n\n\n\n\n\n\n\n\nJudging from the plot above, we have called T/B-cell doublets if TCR fraction is &gt; 0.05% and BCR &gt; 5%\n\n\n## manually set TCR/BCR fraction threshold\nobj@meta.data &lt;- obj@meta.data %&gt;%\n    mutate(TB_Doublet = ifelse(pct.tcr &gt; 0.05 & pct.bcr &gt; 5, \"Doublet\", \"Singlet\"))\n\n\n## Visualize qc metrics for TB doublets\noptions(repr.plot.width=16, repr.plot.height= 6)\ncols &lt;- c(\"nFeature_RNA\", \"nCount_RNA\", \"nFeature_HTO\", \"nCount_HTO\", \"pct.mt\", \"pct.rb\", \"pct.tcr\", \"pct.bcr\")\nobj@meta.data %&gt;%\n    pivot_longer(cols = all_of(cols), names_to = \"measures\", values_to = \"values\") %&gt;%\n    mutate(measures = factor(measures, cols)) %&gt;%\n    ggplot(aes(x = TB_Doublet, y = values, fill = TB_Doublet)) +\n    geom_violin(size = 1, scale = \"width\", bw = \"nrd0\", position=position_dodge(0.75), trim = T, drop = F, adjust = 3) +\n    facet_wrap(~samples + measures, scales = \"free\", ncol = 8) +\n    theme_bw() +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    guides(fill = guide_legend(title = \"\")) +\n    xlab(\"\") +\n    ylab(\"\") +\n    theme_border() +\n    facet_aes()",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Doublet Detection</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.4_doublets.html#evaluating-outputs",
    "href": "sections/1_processing/1.4_doublets.html#evaluating-outputs",
    "title": "6  Doublet Detection",
    "section": "6.6 Evaluating Outputs",
    "text": "6.6 Evaluating Outputs\nscDblFinder and DoubletFinder are both able to predict heterolytic doublets with characteristics reflective of true doublet nature. From the UMAP projections below, you can see the outputs from the 2 algorithms are highly consistent with each other.\n\nThe small cluster of cells circled on the UMAP below are highly likely to be real doublets given the cell number, which is only detected by DoubletFinder and not scDblFinder. Therefore, for the following chapters, we will continue using outputs from DoubletFinder.\n\n\noptions(repr.plot.width=18, repr.plot.height= 4)\nr = 1\nxc = 5.5\nyc = 7.5\nplist &lt;- list(scUMAP(obj, reduction = \"umap\", group.by = \"DoubletFinder\") + \n    ggtitle(\"DoubletFinder\") +\n    annotate(\"path\",\n        x=xc+r*cos(seq(0,2*pi,length.out=100)),\n        y=yc+r*sin(seq(0,2*pi,length.out=100)),\n        linetype = \"dashed\"))\nplist[[2]] &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"scDblFinder\") + \n    ggtitle(\"scDblFinder\") +\n    annotate(\"path\",\n        x=xc+r*cos(seq(0,2*pi,length.out=100)),\n        y=yc+r*sin(seq(0,2*pi,length.out=100)),\n        linetype = \"dashed\")\nplist[[3]] &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"TB_Doublet\") + ggtitle(\"T/B Doublet\")\nplist[[4]] &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"MULTI.global\") + ggtitle(\"MULTIseqDemux\")\nplot_grid(plotlist = plist, ncol = 4)\n\n\n\n\n\n\n\n\n~1/3 of the doublets detected by either algorithms are consistent.\n\n## Compare outputs from scDblFinder and DoubletFinder\ntable(scDblFinder=obj$scDblFinder, DoubletFinder=obj$DoubletFinder)\n\n           DoubletFinder\nscDblFinder Doublet Singlet\n    Doublet     548     594\n    Singlet     332   10836",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Doublet Detection</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.4_doublets.html#session-info",
    "href": "sections/1_processing/1.4_doublets.html#session-info",
    "title": "6  Doublet Detection",
    "section": "Session Info",
    "text": "Session Info\n\nqsave(obj, file = \"seurat/20240826_GSE155224_doublets.qs\")\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.7 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /nemo/lab/caladod/working/Matthew/.conda/envs/seurat5/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] scDblFinder_1.14.0          DoubletFinder_2.0.4        \n [3] BiocParallel_1.36.0         harmony_1.1.0              \n [5] Rcpp_1.0.11                 qs_0.26.3                  \n [7] viridis_0.6.4               viridisLite_0.4.2          \n [9] ggalluvial_0.12.5           ggnewscale_0.4.9           \n[11] ggrepel_0.9.4               UCell_2.4.0                \n[13] writexl_1.4.2               readxl_1.4.3               \n[15] wesanderson_0.3.6.9000      ComplexHeatmap_2.16.0      \n[17] cluster_2.1.4               lmtest_0.9-40              \n[19] zoo_1.8-12                  binaryLogic_0.3.9          \n[21] jaccard_0.1.0               RColorBrewer_1.1-3         \n[23] celda_1.16.1                Matrix_1.6-1               \n[25] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0\n[27] Biobase_2.62.0              GenomicRanges_1.54.1       \n[29] GenomeInfoDb_1.38.0         IRanges_2.36.0             \n[31] S4Vectors_0.40.1            BiocGenerics_0.48.0        \n[33] MatrixGenerics_1.14.0       matrixStats_1.0.0          \n[35] ggpubr_0.6.0                rstatix_0.7.2              \n[37] gridExtra_2.3               scales_1.3.0               \n[39] clustree_0.5.0              ggraph_2.1.0               \n[41] cowplot_1.1.1               patchwork_1.2.0            \n[43] SeuratDisk_0.0.0.9021       tonsilref.SeuratData_2.0.0 \n[45] pbmcref.SeuratData_1.0.0    pbmc3k.SeuratData_3.1.4    \n[47] SeuratData_0.2.2.9001       Seurat_5.0.0               \n[49] SeuratObject_5.0.0          sp_2.1-1                   \n[51] lubridate_1.9.3             forcats_1.0.0              \n[53] stringr_1.5.0               dplyr_1.1.4                \n[55] purrr_1.0.2                 readr_2.1.4                \n[57] tidyr_1.3.0                 tibble_3.2.1               \n[59] ggplot2_3.5.1               tidyverse_2.0.0            \n[61] biomaRt_2.58.0             \n\nloaded via a namespace (and not attached):\n  [1] progress_1.2.2             goftest_1.2-3             \n  [3] Biostrings_2.70.1          vctrs_0.6.4               \n  [5] spatstat.random_3.2-1      RApiSerialize_0.1.2       \n  [7] digest_0.6.33              png_0.1-8                 \n  [9] shape_1.4.6                IRdisplay_1.1             \n [11] deldir_1.0-9               parallelly_1.36.0         \n [13] combinat_0.0-8             magick_2.8.1              \n [15] MASS_7.3-60                reshape2_1.4.4            \n [17] httpuv_1.6.12              foreach_1.5.2             \n [19] qvalue_2.32.0              withr_2.5.2               \n [21] ellipsis_0.3.2             survival_3.5-7            \n [23] memoise_2.0.1              ggbeeswarm_0.7.2          \n [25] GlobalOptions_0.1.2        pbapply_1.7-2             \n [27] IRkernel_1.3.2             prettyunits_1.2.0         \n [29] KEGGREST_1.42.0            promises_1.2.1            \n [31] httr_1.4.7                 restfulr_0.0.15           \n [33] globals_0.16.2             fitdistrplus_1.1-11       \n [35] stringfish_0.16.0          miniUI_0.1.1.1            \n [37] generics_0.1.3             base64enc_0.1-3           \n [39] curl_5.1.0                 repr_1.1.6                \n [41] zlibbioc_1.48.0            ScaledMatrix_1.8.1        \n [43] polyclip_1.10-6            GenomeInfoDbData_1.2.11   \n [45] SparseArray_1.2.0          RcppEigen_0.3.3.9.3       \n [47] xtable_1.8-4               doParallel_1.0.17         \n [49] evaluate_0.23              S4Arrays_1.2.0            \n [51] BiocFileCache_2.10.1       hms_1.1.3                 \n [53] irlba_2.3.5.1              colorspace_2.1-0          \n [55] filelock_1.0.2             hdf5r_1.3.8               \n [57] ROCR_1.0-11                reticulate_1.34.0         \n [59] spatstat.data_3.0-3        magrittr_2.0.3            \n [61] later_1.3.1                lattice_0.21-8            \n [63] spatstat.geom_3.2-7        future.apply_1.11.0       \n [65] scuttle_1.10.3             scattermore_1.2           \n [67] XML_3.99-0.14              assertive.numbers_0.0-2   \n [69] RcppAnnoy_0.0.21           pillar_1.9.0              \n [71] nlme_3.1-163               iterators_1.0.14          \n [73] compiler_4.3.2             beachmat_2.18.0           \n [75] RSpectra_0.16-1            stringi_1.7.12            \n [77] assertive.properties_0.0-5 tensor_1.5                \n [79] GenomicAlignments_1.38.0   MCMCprecision_0.4.0       \n [81] plyr_1.8.9                 scater_1.28.0             \n [83] BiocIO_1.12.0              crayon_1.5.2              \n [85] abind_1.4-5                gridGraphics_0.5-1        \n [87] locfit_1.5-9.8             graphlayouts_1.0.0        \n [89] bit_4.0.5                  codetools_0.2-19          \n [91] BiocSingular_1.16.0        GetoptLong_1.0.5          \n [93] plotly_4.10.3              mime_0.12                 \n [95] splines_4.3.2              circlize_0.4.15           \n [97] fastDummies_1.7.3          sparseMatrixStats_1.14.0  \n [99] dbplyr_2.4.0               cellranger_1.1.0          \n[101] blob_1.2.4                 utf8_1.2.4                \n[103] clue_0.3-64                pbdZMQ_0.3-9              \n[105] WriteXLS_6.4.0             listenv_0.9.0             \n[107] DelayedMatrixStats_1.24.0  ggsignif_0.6.4            \n[109] assertive.base_0.0-9       statmod_1.5.0             \n[111] tzdb_0.4.0                 tweenr_2.0.2              \n[113] pkgconfig_2.0.3            tools_4.3.2               \n[115] cachem_1.0.8               RSQLite_2.3.2             \n[117] DBI_1.1.3                  fastmap_1.1.1             \n[119] ica_1.0-3                  Rsamtools_2.18.0          \n[121] broom_1.0.5                dotCall64_1.1-0           \n[123] carData_3.0-5              RANN_2.6.1                \n[125] farver_2.1.1               tidygraph_1.2.3           \n[127] yaml_2.3.7                 rtracklayer_1.62.0        \n[129] cli_3.6.1                  assertive.types_0.0-3     \n[131] leiden_0.4.3               lifecycle_1.0.3           \n[133] uwot_0.1.16                bluster_1.10.0            \n[135] assertive.files_0.0-2      backports_1.4.1           \n[137] timechange_0.2.0           gtable_0.3.4              \n[139] rjson_0.2.21               ggridges_0.5.4            \n[141] progressr_0.14.0           limma_3.56.2              \n[143] parallel_4.3.2             edgeR_3.42.4              \n[145] jsonlite_1.8.7             RcppHNSW_0.5.0            \n[147] bitops_1.0-7               xgboost_1.7.7.1           \n[149] bit64_4.0.5                Rtsne_0.16                \n[151] spatstat.utils_3.0-5       BiocNeighbors_1.18.0      \n[153] RcppParallel_5.1.7         metapod_1.8.0             \n[155] dqrng_0.3.1                enrichR_3.2               \n[157] lazyeval_0.2.2             shiny_1.7.5.1             \n[159] htmltools_0.5.6.1          sctransform_0.4.1         \n[161] rappdirs_0.3.3             glue_1.6.2                \n[163] spam_2.10-0                XVector_0.42.0            \n[165] RCurl_1.98-1.12            scran_1.28.2              \n[167] igraph_1.5.1               R6_2.5.1                  \n[169] labeling_0.4.3             vipor_0.4.5               \n[171] DelayedArray_0.28.0        tidyselect_1.2.0          \n[173] ggforce_0.4.1              xml2_1.3.5                \n[175] car_3.1-2                  AnnotationDbi_1.64.0      \n[177] future_1.33.0              rsvd_1.0.5                \n[179] munsell_0.5.0              KernSmooth_2.23-22        \n[181] multipanelfigure_2.1.2     data.table_1.14.8         \n[183] htmlwidgets_1.6.2          rlang_1.1.3               \n[185] spatstat.sparse_3.0-3      spatstat.explore_3.2-5    \n[187] uuid_1.1-1                 fansi_1.0.5               \n[189] beeswarm_0.4.0",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Doublet Detection</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.5_decont.html",
    "href": "sections/1_processing/1.5_decont.html",
    "title": "7  RNA Contamination",
    "section": "",
    "text": "Motivation\n## set up environment\nsuppressMessages({\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/Seurat/processing.R\")\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/Seurat/plotting.R\")\nsetwd(\"/nemo/lab/caladod/working/Matthew/project/matthew/MH_GSE155224\")})\n\n## import seurat objects\nobj &lt;- qread(\"seurat/20240826_GSE155224_doublets.qs\")",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>RNA Contamination</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.5_decont.html#sec-calculate_gene_fractions",
    "href": "sections/1_processing/1.5_decont.html#sec-calculate_gene_fractions",
    "title": "7  RNA Contamination",
    "section": "7.1 Calculate Gene Fractions",
    "text": "7.1 Calculate Gene Fractions\nThe function below will perform the calculations of key quality control parameters for every cell but will not filter any cells yet. This is done by calculating the no. of selected reads over the no. of total reads for every cell.\n\n# run calculate gene fractions if haven't done so already\nobj &lt;- calculate_fractions(obj)\n\n\nobj_list &lt;- SplitObject(obj, split.by = \"samples\")\nobj_list\n\n$filtered_matrix_1\nAn object of class Seurat \n17895 features across 7502 samples within 3 assays \nActive assay: RNA (17697 features, 2000 variable features)\n 3 layers present: scale.data, data, counts\n 2 other assays present: HTO, ADT\n 3 dimensional reductions calculated: pca, harmony, umap\n\n$filtered_matrix_2\nAn object of class Seurat \n17895 features across 8227 samples within 3 assays \nActive assay: RNA (17697 features, 2000 variable features)\n 3 layers present: scale.data, data, counts\n 2 other assays present: HTO, ADT\n 3 dimensional reductions calculated: pca, harmony, umap\n\n\n\nfor(x in seq_along(obj_list)){\n    obj_list[[x]] &lt;- run_decontx(obj_list[[x]], raw.dir = dir[x], cluster = \"seurat_clusters\")}\n\n\nrun_decontx &lt;- function(x, raw.dir, cluster = NULL, assay = \"RNA\", feature.type = \"Gene Expression\"){\n    toc &lt;- x[[assay]]$counts\n    tod &lt;- Read10X(raw.dir)[[feature.type]]\n    output &lt;- decontX(toc, background = tod, z = cluster, delta = c(10, 10), estimateDelta = FALSE)\n\n    ## add contamination score\n    score &lt;- data.frame(sc.decontx = output$contamination)\n    rownames(score) &lt;- colnames(output$decontXcounts)\n    x &lt;- AddMetaData(x, score)\n\n    ## add decontaminated counts\n    rna.clean &lt;- as(output$decontXcounts[,colnames(x)], \"sparseMatrix\")\n    x[[\"DX\"]] &lt;- CreateAssay5Object(counts = rna.clean, min.cells = 0, min.features = 0)\n    \n    return(x)\n    }",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>RNA Contamination</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.6_qc.html",
    "href": "sections/1_processing/1.6_qc.html",
    "title": "8  Quality Control",
    "section": "",
    "text": "Motivation\nBefore futher analysis, identifying and removing poor quality cells is a critical step to ensure quality of the data and prevent misinformative results. Crucial parameters indicative of poor quality cells include the fraction of mitochondrial, ribosomal, haemoglobin, T/B-cell recepter (TCR/BCR) reads. High mitochondrial fractions is a typical characteristic of apoptotic cells in scRNAseq data. High ribosomal & haemoglobin fractions indicates poor sample quality and RBC contamination. Cells with high TCR & BCR fractions are indicative of T/B-cell doublets.\n## set up environment\nsuppressMessages({\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/Seurat/processing.R\")\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/Seurat/plotting.R\")\nsetwd(\"/nemo/lab/caladod/working/Matthew/project/matthew/MH_GSE155224\")})\n\n## import seurat objects\nobj &lt;- qread(\"seurat/20240826_GSE155224_doublets.qs\")\nobj &lt;- qread(\"seurat/20240826_GSE155224_doublets.qs\")",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quality Control</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.6_qc.html#sec-calculate_gene_fractions",
    "href": "sections/1_processing/1.6_qc.html#sec-calculate_gene_fractions",
    "title": "8  Quality Control",
    "section": "8.1 Calculate Gene Fractions",
    "text": "8.1 Calculate Gene Fractions\nThe function below will perform the calculations of key quality control parameters for every cell but will not filter any cells yet. This is done by calculating the no. of selected reads over the no. of total reads for every cell.\n\n# run calculate gene fractions if haven't done so already\nobj &lt;- calculate_fractions(obj)",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quality Control</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.6_qc.html#sec-remove_vdj_genes",
    "href": "sections/1_processing/1.6_qc.html#sec-remove_vdj_genes",
    "title": "8  Quality Control",
    "section": "8.2 Remove VDJ Genes",
    "text": "8.2 Remove VDJ Genes\nIn the case of T/B-cells, removing VDJ genes could be critical prior to subsequence steps to avoid cell clustering by VDJ genes, especially by isotype such as IgG and IgM for B-cells. Below is a wrapper function to remove VDJ genes from the Seurat object.\n\n\n\n\n\n\nWarning\n\n\n\nBefore removing VDJ genes, please run Seurat::NormalizeData() to ensure library size is normalized with VDJ genes included.\n\n\n\n# normalize counts and remove vdj genes\nobj &lt;- NormalizeData(obj)\nobj &lt;- remove_vdj_genes(obj, bcr = T, tcr = T)\n\nNormalizing layer: counts\n\nWarning message:\n“Different cells and/or features from existing assay RNA”\nWarning message:\n“Different cells and/or features from existing assay RNA”",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quality Control</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.6_qc.html#sec-filter_by_gene_fractions",
    "href": "sections/1_processing/1.6_qc.html#sec-filter_by_gene_fractions",
    "title": "8  Quality Control",
    "section": "8.3 Filter By Gene Fractions",
    "text": "8.3 Filter By Gene Fractions\nFollowing Section 8.1, we will now set thresholds to remove poor quality cells mentioned above. There are generally 2 approaches - either hard and soft threshold could be set to remove cells. The difference between the methods is that using a soft threshold means that you are defining poor quality cells based on the distribution of the population, which ensures a good proportion of cells will remain and hopefully are the cells of interest. Generally we recommend using a soft threshold for quality control, especially in the case where users have multiple sequencing runs, as these threshold may subject to change depending on cell populations, batch effects etc.\nFor both approaches, a threshold is set for the following essential quality control parameters, including nFeatures_RNA, nCount_RNA, mitochondrial, haemoglobin fraction. Typically mitochondrial fraction threshold is set at 10% for human and 5% for mouse.\n\n\n\n\n\n\nWarning\n\n\n\nIf VDJ genes were removed earlier, recalculating nFeature and nCount is critical to remove cells that only contain VDJ genes which are likely empty droplets contaminated with RNA. This was done automatically in the Seurat object when VDJ were first removed.\n\n\n\n## Visualize each quality control parameter for each sequencing run\noptions(repr.plot.width=10, repr.plot.height= 3)\ncols &lt;- c(\"nFeature_RNA\", \"nCount_RNA\", \"pct.mt\", \"pct.rb\", \"pct.tcr\", \"pct.bcr\")\nobj@meta.data %&gt;%\n    pivot_longer(cols = all_of(cols), names_to = \"measures\", values_to = \"values\") %&gt;%\n    ggplot(aes(x = samples, y = values, fill = samples)) +\n    geom_violin(size = 1, scale = \"width\", bw = \"nrd0\", position=position_dodge(0.75), trim = T, drop = F, adjust = 1.5) +\n    facet_wrap(~ measures, scales = \"free\", ncol = 6) +\n    theme_bw() +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    guides(fill = guide_legend(title = \"\")) +\n    xlab(\"\") +\n    ylab(\"\") +\n    theme_border() +\n    facet_aes()\n    \n\n\n\n\n\n\n\n\n\n8.3.1 Hard Threshold\n\nGiven both our sequencing runs contain the similar composition of cells and distributions of the quality control parameters, we can apply the same hard thresholds to both runs.\n\n\n## Visualize each quality control parameter for each sequencing run\noptions(repr.plot.width=10, repr.plot.height= 3)\ncols &lt;- c(\"nFeature_RNA\", \"nCount_RNA\", \"pct.mt\", \"pct.rb\", \"pct.tcr\", \"pct.bcr\")\nobj@meta.data %&gt;%\n    pivot_longer(cols = all_of(cols), names_to = \"measures\", values_to = \"values\") %&gt;%\n\n    ## define hard threshold\n    mutate(\n        yintercept = case_when(\n            measures == \"nCount_RNA\" ~ 8000,\n            measures == \"nFeature_RNA\" ~ 2000,\n            measures == \"pct.mt\" ~ 10,\n            .default = NULL)) %&gt;%\n            \n    ggplot(aes(x = samples, y = values, fill = samples)) +\n    geom_violin(size = 1, scale = \"width\", bw = \"nrd0\", position=position_dodge(0.75), trim = T, drop = F, adjust = 1.5) +\n    facet_wrap(~ measures, scales = \"free\", ncol = 6) +\n    geom_hline(aes(yintercept = yintercept), color = \"black\", linetype = \"dashed\", size = 1) + \n    theme_bw() +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    guides(fill = guide_legend(title = \"\"), color = guide_none()) +\n    xlab(\"\") +\n    ylab(\"\") +\n    theme_border() +\n    facet_aes()\n\nWarning message:\n“Removed 47187 rows containing missing values or values outside the scale range\n(`geom_hline()`).”\n\n\n\n\n\n\n\n\n\n\nAfter visualization we removed cells based on the following criteria :\n\nnCount_RNA &gt; 8000\nnFeature_RNA &lt; 200 or &gt; 2000\npct.mt &gt; 10%\npct.hb &gt; 0%\n\n&gt; 90% cells remains from each sequencing run after quality control filter by hard threshold.\n\n\n## set hard threshold\nobj@meta.data &lt;- obj@meta.data %&gt;%\n    mutate(hardqc = case_when(\n        .$nCount_RNA &gt; 8000 ~ \"Fail\",\n        .$nFeature_RNA &gt; 2000 ~ \"Fail\",\n        .$nFeature_RNA &lt; 200 ~ \"Fail\",\n        .$pct.mt &gt; 10 ~ \"Fail\",\n        .$pct.hb &gt; 0 ~ \"Fail\",\n        .default = \"Pass\"))\nqc_report(obj, column = \"hardqc\", sample = \"samples\")\n\n91% (6827) of cells remains - filtered_matrix_1\n\n90.2% (7420) of cells remains - filtered_matrix_2\n\n\n\n\n## Visualize the quality control parameters for good/poor quality cells\noptions(repr.plot.width=15, repr.plot.height= 3)\ncols &lt;- c(\"nFeature_RNA\", \"nCount_RNA\", \"pct.mt\", \"pct.rb\", \"pct.hb\", \"pct.tcr\", \"pct.bcr\")\nobj@meta.data %&gt;%\n    pivot_longer(cols = all_of(cols), names_to = \"measures\", values_to = \"values\") %&gt;%\n    ggplot(aes(x = hardqc, y = values, fill = hardqc)) +\n    geom_violin(size = 1, scale = \"width\", bw = \"nrd0\", position=position_dodge(0.75), trim = T, drop = F, adjust = 1.5) +\n    facet_wrap(~measures, scales = \"free\", ncol = 7) +\n    guides(fill = guide_legend(title = \"\")) +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    xlab(\"\") +\n    ylab(\"\") +\n    theme_border() + \n    facet_aes()\n    \n\n\n\n\n\n\n\n\n\n\n8.3.2 Soft Threshold\nAs a comparison, we will perform soft threshold cutoff to remove outlier (poor quality) cells based on population distribution. To do so, we have adapted the median absolute deviation (MAD) method [see details] to determine outlier cells from each sample based on the quality control filter mentioned above. Below is a wrapper function to calculate thresholds for the specified quality control parameters within 5 MAD deviations and determine outlier cells. Note the function does not perform the filtering yet.\n\n&gt; 85% cells remains from each sample after quality control filter by soft threshold.\n\n\n## calculate mad and determine outlier cells\nobj &lt;- calculate_mad(obj, columns = c(\"nFeature_RNA\", \"nCount_RNA\", \"pct.mt\", \"pct.hb\"), stdev = 5, samples = \"samples\")\n\n87.8% (6585) of cells remains - filtered_matrix_1\n\n88% (7237) of cells remains - filtered_matrix_2\n\n\n\n\n## Visualize the quality control parameters for good/poor quality cells\noptions(repr.plot.width=15, repr.plot.height= 3)\ncols &lt;- c(\"nFeature_RNA\", \"nCount_RNA\", \"pct.mt\", \"pct.rb\", \"pct.hb\", \"pct.tcr\", \"pct.bcr\")\nobj@meta.data %&gt;%\n    pivot_longer(cols = all_of(cols), names_to = \"measures\", values_to = \"values\") %&gt;%\n    ggplot(aes(x = softqc, y = values, fill = softqc)) +\n    geom_violin(size = 1, scale = \"width\", bw = \"nrd0\", position=position_dodge(0.75), trim = T, drop = F, adjust = 1.5) +\n    facet_wrap(~measures, scales = \"free\", ncol = 7) +\n    guides(fill = guide_legend(title = \"\")) +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n    xlab(\"\") +\n    ylab(\"\") +\n    theme_border() + \n    facet_aes()\n    \n\n\n\n\n\n\n\n\n\n\n8.3.3 Inspecting QC\nFinally we will move forward with the soft threshold, Here we will do a final inspection to ensure we are keeping the high quality cells.\n\n# make scatter plots\nfs1.plot &lt;- list()\nfs2.plot &lt;- list()\nfs3.plot &lt;- list()\nfs4.plot &lt;- list()\n\nobj_list &lt;- SplitObject(obj, split.by = \"samples\")\nfor(x in 1:length(obj_list)){\n    Idents(obj_list[[x]]) &lt;- \"samples\"\n    fs1.plot[[x]] &lt;- FeatureScatter(obj_list[[x]], group.by = \"softqc\", \"nCount_RNA\", \"nFeature_RNA\", pt.size = 0.5, plot.cor = T) + NoLegend()\n    fs2.plot[[x]] &lt;- FeatureScatter(obj_list[[x]], group.by = \"softqc\", \"nCount_RNA\", \"pct.mt\", pt.size = 0.5, plot.cor = T) + NoLegend()\n    fs3.plot[[x]] &lt;- FeatureScatter(obj_list[[x]], group.by = \"softqc\", \"pct.rb\", \"pct.mt\", pt.size = 0.5, plot.cor = T) + NoLegend()}\n\n\n# nCount_RNA vs nFeature_RNA\noptions(repr.plot.width=10, repr.plot.height=4)\nplot_grid(plotlist = fs1.plot, ncol = 2)\n\n\n\n\n\n\n\n\n\n# nCount_RNA vs mitochondrial fraction\noptions(repr.plot.width=10, repr.plot.height=4)\nplot_grid(plotlist = fs2.plot, ncol = 2)\n\n\n\n\n\n\n\n\n\n# ribosomal fraction vs mitochondrial fraction\noptions(repr.plot.width=10, repr.plot.height=4)\nplot_grid(plotlist = fs3.plot, ncol = 2)",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quality Control</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.6_qc.html#sec-filtercells",
    "href": "sections/1_processing/1.6_qc.html#sec-filtercells",
    "title": "8  Quality Control",
    "section": "8.4 Remove Poor Quality Cells",
    "text": "8.4 Remove Poor Quality Cells\nCombining the soft threshold filters together with outputs from MULTIseqDemux, DoubletFinder, T/B Doublet (see previous chapters), we will remove the poor quality cells altogether.\n\n&gt; 60% of cells remain from each sample after all quality control filters.\n\n\n## make a column of cells to keep, putting together outputs from multiseqdemux, doubletfinder, t/b doublets and quality control\nobj@meta.data &lt;- obj@meta.data %&gt;%\n    mutate(finalqc = ifelse(\n        MULTI.global == \"Singlet\" & DoubletFinder == \"Singlet\" & TB_Doublet == \"Singlet\" & softqc == \"Pass\", \"Pass\", \"Fail\"))\nqc_report(obj, column = \"finalqc\", sample = \"samples\")\n\n62% (4653) of cells remains - filtered_matrix_1\n\n62.6% (5150) of cells remains - filtered_matrix_2\n\n\n\n\n# visualize poor quality cells on UMAP\noptions(repr.plot.width=5, repr.plot.height=4)\nscUMAP(obj, group.by = \"finalqc\", reduction = \"umap\")\n\n\n\n\n\n\n\n\n\n## remove poor quality cells\nobj &lt;- subset(obj, subset = finalqc == \"Pass\")\nobj\n\nAn object of class Seurat \n17895 features across 9803 samples within 5 assays \nActive assay: RNA (17437 features, 0 variable features)\n 2 layers present: counts, data\n 4 other assays present: HTO, ADT, BCR, TCR\n 3 dimensional reductions calculated: pca, harmony, umap",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quality Control</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.6_qc.html#sec-calculate_cell_cycle",
    "href": "sections/1_processing/1.6_qc.html#sec-calculate_cell_cycle",
    "title": "8  Quality Control",
    "section": "8.5 Calculate Cell Cycle",
    "text": "8.5 Calculate Cell Cycle\nFinally we will calculate cycle/profileration scores for each cell for every cell and assign cells to a proliferation state. We will perform Seurat’s cell cycle scoring pipeline with the “calculate_cellcycle” wrapper function.\n\n## assign cell cycle phase\nobj &lt;- calculate_cellcycle(obj, remove_genes = F)\n\nWarning message:\n“The following features are not present in the object: MLF1IP, not searching for symbol synonyms”\nWarning message:\n“The following features are not present in the object: FAM64A, HN1, not searching for symbol synonyms”\n\n\n\n## visualize cell cycle phase on UMAP\noptions(repr.plot.width=5, repr.plot.height=4)\nscUMAP(obj, group.by = \"Phase\", reduction = \"umap\")\n\n\n\n\n\n\n\n\n\nBoth samples contain 50% of cycling cells at G2M/S Phase. The proportion of cycling cells are consistent across 2 sequencing runs.\n\n\n## calculate proportions of cells at each phase\noptions(repr.plot.width=2.5, repr.plot.height=5)\nobj@meta.data %&gt;%\n    group_by(samples, Phase) %&gt;%\n    summarize(count = n()) %&gt;%\n    group_by(samples) %&gt;%\n    mutate(pct = count*100/sum(count)) %&gt;%\n    ggplot(aes(x = samples, y = pct, fill = Phase)) +\n    geom_col(color = \"white\", position = \"stack\") +\n    theme_line() +\n    xlab(\"\") +\n    ylab(\"Proportions (%)\")",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quality Control</span>"
    ]
  },
  {
    "objectID": "sections/1_processing/1.6_qc.html#session-info",
    "href": "sections/1_processing/1.6_qc.html#session-info",
    "title": "8  Quality Control",
    "section": "Session Info",
    "text": "Session Info\n\nqsave(obj, file = \"seurat/20240826_GSE155224_qc.qs\")\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.7 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /nemo/lab/caladod/working/Matthew/.conda/envs/seurat5/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] scDblFinder_1.14.0          DoubletFinder_2.0.4        \n [3] BiocParallel_1.36.0         harmony_1.1.0              \n [5] Rcpp_1.0.11                 qs_0.26.3                  \n [7] viridis_0.6.4               viridisLite_0.4.2          \n [9] ggalluvial_0.12.5           ggnewscale_0.4.9           \n[11] ggrepel_0.9.4               UCell_2.4.0                \n[13] writexl_1.4.2               readxl_1.4.3               \n[15] wesanderson_0.3.6.9000      ComplexHeatmap_2.16.0      \n[17] cluster_2.1.4               lmtest_0.9-40              \n[19] zoo_1.8-12                  binaryLogic_0.3.9          \n[21] jaccard_0.1.0               RColorBrewer_1.1-3         \n[23] celda_1.16.1                Matrix_1.6-1               \n[25] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0\n[27] Biobase_2.62.0              GenomicRanges_1.54.1       \n[29] GenomeInfoDb_1.38.0         IRanges_2.36.0             \n[31] S4Vectors_0.40.1            BiocGenerics_0.48.0        \n[33] MatrixGenerics_1.14.0       matrixStats_1.0.0          \n[35] ggpubr_0.6.0                rstatix_0.7.2              \n[37] gridExtra_2.3               scales_1.3.0               \n[39] clustree_0.5.0              ggraph_2.1.0               \n[41] cowplot_1.1.1               patchwork_1.2.0            \n[43] SeuratDisk_0.0.0.9021       tonsilref.SeuratData_2.0.0 \n[45] pbmcref.SeuratData_1.0.0    pbmc3k.SeuratData_3.1.4    \n[47] SeuratData_0.2.2.9001       Seurat_5.0.0               \n[49] SeuratObject_5.0.0          sp_2.1-1                   \n[51] lubridate_1.9.3             forcats_1.0.0              \n[53] stringr_1.5.0               dplyr_1.1.4                \n[55] purrr_1.0.2                 readr_2.1.4                \n[57] tidyr_1.3.0                 tibble_3.2.1               \n[59] ggplot2_3.5.1               tidyverse_2.0.0            \n[61] biomaRt_2.58.0             \n\nloaded via a namespace (and not attached):\n  [1] igraph_1.5.1               ica_1.0-3                 \n  [3] plotly_4.10.3              scater_1.28.0             \n  [5] zlibbioc_1.48.0            tidyselect_1.2.0          \n  [7] bit_4.0.5                  doParallel_1.0.17         \n  [9] clue_0.3-64                lattice_0.21-8            \n [11] rjson_0.2.21               blob_1.2.4                \n [13] S4Arrays_1.2.0             parallel_4.3.2            \n [15] png_0.1-8                  cli_3.6.1                 \n [17] goftest_1.2-3              BiocIO_1.12.0             \n [19] bluster_1.10.0             BiocNeighbors_1.18.0      \n [21] uwot_0.1.16                curl_5.1.0                \n [23] mime_0.12                  evaluate_0.23             \n [25] leiden_0.4.3               stringi_1.7.12            \n [27] backports_1.4.1            assertive.numbers_0.0-2   \n [29] XML_3.99-0.14              httpuv_1.6.12             \n [31] AnnotationDbi_1.64.0       magrittr_2.0.3            \n [33] rappdirs_0.3.3             splines_4.3.2             \n [35] RApiSerialize_0.1.2        sctransform_0.4.1         \n [37] ggbeeswarm_0.7.2           DBI_1.1.3                 \n [39] withr_2.5.2                xgboost_1.7.7.1           \n [41] assertive.base_0.0-9       tidygraph_1.2.3           \n [43] rtracklayer_1.62.0         htmlwidgets_1.6.2         \n [45] IRkernel_1.3.2             labeling_0.4.3            \n [47] SparseArray_1.2.0          cellranger_1.1.0          \n [49] reticulate_1.34.0          XVector_0.42.0            \n [51] RhpcBLASctl_0.23-42        timechange_0.2.0          \n [53] foreach_1.5.2              fansi_1.0.5               \n [55] data.table_1.14.8          RSpectra_0.16-1           \n [57] irlba_2.3.5.1              fastDummies_1.7.3         \n [59] gridGraphics_0.5-1         ellipsis_0.3.2            \n [61] lazyeval_0.2.2             yaml_2.3.7                \n [63] survival_3.5-7             scattermore_1.2           \n [65] crayon_1.5.2               RcppAnnoy_0.0.21          \n [67] IRdisplay_1.1              progressr_0.14.0          \n [69] tweenr_2.0.2               later_1.3.1               \n [71] ggridges_0.5.4             assertive.types_0.0-3     \n [73] codetools_0.2-19           base64enc_0.1-3           \n [75] GlobalOptions_0.1.2        KEGGREST_1.42.0           \n [77] Rtsne_0.16                 shape_1.4.6               \n [79] limma_3.56.2               Rsamtools_2.18.0          \n [81] filelock_1.0.2             pkgconfig_2.0.3           \n [83] xml2_1.3.5                 GenomicAlignments_1.38.0  \n [85] spatstat.sparse_3.0-3      multipanelfigure_2.1.2    \n [87] xtable_1.8-4               car_3.1-2                 \n [89] plyr_1.8.9                 httr_1.4.7                \n [91] tools_4.3.2                globals_0.16.2            \n [93] beeswarm_0.4.0             broom_1.0.5               \n [95] nlme_3.1-163               dbplyr_2.4.0              \n [97] hdf5r_1.3.8                digest_0.6.33             \n [99] farver_2.1.1               tzdb_0.4.0                \n[101] reshape2_1.4.4             WriteXLS_6.4.0            \n[103] glue_1.6.2                 cachem_1.0.8              \n[105] BiocFileCache_2.10.1       polyclip_1.10-6           \n[107] generics_0.1.3             Biostrings_2.70.1         \n[109] parallelly_1.36.0          statmod_1.5.0             \n[111] RcppHNSW_0.5.0             ScaledMatrix_1.8.1        \n[113] carData_3.0-5              pbapply_1.7-2             \n[115] assertive.properties_0.0-5 spam_2.10-0               \n[117] dqrng_0.3.1                utf8_1.2.4                \n[119] assertive.files_0.0-2      graphlayouts_1.0.0        \n[121] ggsignif_0.6.4             RcppEigen_0.3.3.9.3       \n[123] shiny_1.7.5.1              GenomeInfoDbData_1.2.11   \n[125] RCurl_1.98-1.12            memoise_2.0.1             \n[127] future_1.33.0              RANN_2.6.1                \n[129] stringfish_0.16.0          spatstat.data_3.0-3       \n[131] spatstat.utils_3.0-5       hms_1.1.3                 \n[133] fitdistrplus_1.1-11        munsell_0.5.0             \n[135] colorspace_2.1-0           rlang_1.1.3               \n[137] DelayedMatrixStats_1.24.0  sparseMatrixStats_1.14.0  \n[139] dotCall64_1.1-0            ggforce_0.4.1             \n[141] circlize_0.4.15            scuttle_1.10.3            \n[143] iterators_1.0.14           abind_1.4-5               \n[145] MCMCprecision_0.4.0        repr_1.1.6                \n[147] bitops_1.0-7               promises_1.2.1            \n[149] RSQLite_2.3.2              qvalue_2.32.0             \n[151] DelayedArray_0.28.0        pbdZMQ_0.3-9              \n[153] compiler_4.3.2             prettyunits_1.2.0         \n[155] beachmat_2.18.0            listenv_0.9.0             \n[157] enrichR_3.2                edgeR_3.42.4              \n[159] BiocSingular_1.16.0        tensor_1.5                \n[161] MASS_7.3-60                progress_1.2.2            \n[163] uuid_1.1-1                 spatstat.random_3.2-1     \n[165] R6_2.5.1                   fastmap_1.1.1             \n[167] vipor_0.4.5                ROCR_1.0-11               \n[169] rsvd_1.0.5                 gtable_0.3.4              \n[171] KernSmooth_2.23-22         miniUI_0.1.1.1            \n[173] deldir_1.0-9               htmltools_0.5.6.1         \n[175] RcppParallel_5.1.7         bit64_4.0.5               \n[177] spatstat.explore_3.2-5     lifecycle_1.0.3           \n[179] restfulr_0.0.15            vctrs_0.6.4               \n[181] spatstat.geom_3.2-7        scran_1.28.2              \n[183] future.apply_1.11.0        pillar_1.9.0              \n[185] magick_2.8.1               metapod_1.8.0             \n[187] locfit_1.5-9.8             combinat_0.0-8            \n[189] jsonlite_1.8.7             GetoptLong_1.0.5",
    "crumbs": [
      "**Chapter 1 : Data Processing**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Quality Control</span>"
    ]
  },
  {
    "objectID": "sections/2_cellclassification/2.1_sctransform.html",
    "href": "sections/2_cellclassification/2.1_sctransform.html",
    "title": "9  SCTransform",
    "section": "",
    "text": "9.1 SCTransform, PCA, Integration\nobj[[\"RNA\"]] &lt;- split(obj[[\"RNA\"]], f = obj$samples)\nobj\n\nAn object of class Seurat \n17895 features across 9803 samples within 5 assays \nActive assay: RNA (17437 features, 0 variable features)\n 4 layers present: counts.filtered_matrix_1, counts.filtered_matrix_2, data.filtered_matrix_1, data.filtered_matrix_2\n 4 other assays present: HTO, ADT, BCR, TCR\n 3 dimensional reductions calculated: pca, harmony, umap\nobj &lt;- SCTransform(obj, vst.flavor = \"v2\", variable.features.n = 3000, assay = \"RNA\", return.only.var.genes = F, verbose = F, vars.to.regress = c(\"S.Score\", \"G2M.Score\"))\nobj &lt;- RunPCA(obj, reduction.name = \"pca\", verbose = F)\nobj &lt;- RunHarmony(obj, reduction.use = \"pca\", group.by.vars = \"samples\", verbose = F)\n\nWarning message:\n“Adding more features than present in current data”\nWarning message:\n“Adding more features than present in current data”\nTransposing data matrix\noptions(repr.plot.width=5, repr.plot.height=4)\nElbowPlot(obj, ndims = 50, reduction = \"harmony\")\noptions(repr.plot.width=10, repr.plot.height=8)\np1 &lt;- scUMAP(obj, reduction = \"harmony\", group.by = \"MULTI_ID\", split.by = \"samples\", shuffle = T)\np2 &lt;- scUMAP(obj, reduction = \"harmony\", group.by = \"Phase\", split.by = \"samples\", shuffle = T)\np1/p2\nobj &lt;- RunUMAP(obj, dims = 1:10, reduction = \"harmony\", reduction.name = \"umap\", assay = \"SCT\", verbose = FALSE)\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\noptions(repr.plot.width=10, repr.plot.height=4)\np1 &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"samples\", shuffle = T)\np2 &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"Phase\")\np1 + p2\noptions(repr.plot.width=10, repr.plot.height=4)\np1 &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"MULTI_ID\", split.by = \"samples\", shuffle = T)\np1",
    "crumbs": [
      "**Chapter 2 : Cell Classification**\n",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>SCTransform</span>"
    ]
  },
  {
    "objectID": "sections/2_cellclassification/2.1_sctransform.html#regress-cell-cycle-scores",
    "href": "sections/2_cellclassification/2.1_sctransform.html#regress-cell-cycle-scores",
    "title": "9  SCTransform",
    "section": "9.2 Regress Cell Cycle Scores",
    "text": "9.2 Regress Cell Cycle Scores\n\nobj &lt;- SCTransform(obj, vst.flavor = \"v2\", variable.features.n = 3000, assay = \"RNA\", return.only.var.genes = F, verbose = F, vars.to.regress = c(\"S.Score\", \"G2M.Score\"))\nobj &lt;- RunPCA(obj, reduction.name = \"pca\", verbose = F)\n\nWarning message:\n“Adding more features than present in current data”\nWarning message:\n“Adding more features than present in current data”",
    "crumbs": [
      "**Chapter 2 : Cell Classification**\n",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>SCTransform</span>"
    ]
  },
  {
    "objectID": "sections/2_cellclassification/2.1_sctransform.html#adjust-harmony-integration",
    "href": "sections/2_cellclassification/2.1_sctransform.html#adjust-harmony-integration",
    "title": "9  SCTransform",
    "section": "9.3 Adjust Harmony Integration",
    "text": "9.3 Adjust Harmony Integration\n\nobj$harmony_correct &lt;- paste0(obj$samples, \"_\", obj$MULTI_ID)\nobj &lt;- RunHarmony(obj, reduction.use = \"pca\", group.by.vars = \"harmony_correct\", verbose = F)\n\nTransposing data matrix\n\n\n\n\noptions(repr.plot.width=5, repr.plot.height=4)\nElbowPlot(obj, ndims = 50, reduction = \"harmony\")\n\n\n\n\n\n\n\n\n\noptions(repr.plot.width=10, repr.plot.height=4)\np1 &lt;- scUMAP(obj, reduction = \"harmony\", group.by = \"MULTI_ID\", split.by = \"samples\", shuffle = T)\np1\n\n\n\n\n\n\n\n\n\nobj &lt;- RunUMAP(obj, dims = 1:10, reduction = \"harmony\", reduction.name = \"umap\", assay = \"SCT\", verbose = FALSE)\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\nFound more than one class \"dist\" in cache; using the first, from namespace 'BiocGenerics'\n\nAlso defined by ‘spam’\n\n\n\n\noptions(repr.plot.width=10, repr.plot.height=4)\np1 &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"samples\", shuffle = T)\np2 &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"Phase\")\np1 + p2\n\n\n\n\n\n\n\n\n\noptions(repr.plot.width=8, repr.plot.height=4)\nobj$MULTI_ID &lt;- gsub(\".*Hash\", \"Hash\", obj$MULTI_ID)\nobj$MULTI_ID &lt;- gsub(\"-total.*\", \"\", obj$MULTI_ID)\np1 &lt;- scUMAP(obj, reduction = \"umap\", group.by = \"MULTI_ID\", split.by = \"samples\", shuffle = T)\np1\n\n\n\n\n\n\n\n\n\noptions(repr.plot.width=15, repr.plot.height=4)\nscDensityUMAP(obj, split.by = \"MULTI_ID\", reduction = \"umap\", adjust = 1.2)",
    "crumbs": [
      "**Chapter 2 : Cell Classification**\n",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>SCTransform</span>"
    ]
  },
  {
    "objectID": "sections/2_cellclassification/2.1_sctransform.html#find-louvain-clusters",
    "href": "sections/2_cellclassification/2.1_sctransform.html#find-louvain-clusters",
    "title": "9  SCTransform",
    "section": "9.4 Find Louvain Clusters",
    "text": "9.4 Find Louvain Clusters\n\nobj &lt;- FindNeighbors(obj, reduction = \"harmony\", dims = 1:10, verbose = F)\nobj &lt;- FindClusters(obj, resolution = seq(0.1, 1, 0.1), algorithm = 1, verbose = F)\nclustree &lt;- clustree(obj@meta.data, prefix = paste0(\"SCT_snn_res.\"))\n\n\noptions(repr.plot.width=15, repr.plot.height=6)\nprint(clustree + \n  theme(legend.box = \"horizontal\"))\n\n\n\n\n\n\n\n\n\noptions(repr.plot.width=5, repr.plot.height=4)\nscUMAP(obj, reduction = \"umap\", group.by = \"SCT_snn_res.0.2\", count = T, pt.size = 1.2, cols = kelly, shuffle = F)\n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n\n\n\n\n\n\n\n\n\n\nfor(a in names(obj@assays)){\n    if(a %in% c(\"RNA\", \"BCR\", \"TCR\", \"CC\")){\n        obj[[a]] &lt;- JoinLayers(obj[[a]])}}\n\n\nfor(a in names(obj@assays)){\n    if(a %in% c(\"BCR\", \"TCR\", \"CC\")){\n        obj &lt;- return_genes(obj, from_assay = a, to_assay = \"RNA\")}}\n\nWarning message:\n“Different cells and/or features from existing assay RNA”\nWarning message:\n“Different cells and/or features from existing assay RNA”\n\n\n\noptions(repr.plot.width=4, repr.plot.height=3)\npearson &lt;- calculate_cluster_similarity(obj, cluster = \"SCT_snn_res.0.2\", variable.features = T)\nplot_similarity_heatmap(pearson)\n\nWarning message in brewer.pal(12, \"RdBu\"):\n“n too large, allowed maximum for palette RdBu is 11\nReturning the palette you asked for with that many colors\n”",
    "crumbs": [
      "**Chapter 2 : Cell Classification**\n",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>SCTransform</span>"
    ]
  },
  {
    "objectID": "sections/2_cellclassification/2.1_sctransform.html#session-info",
    "href": "sections/2_cellclassification/2.1_sctransform.html#session-info",
    "title": "9  SCTransform",
    "section": "9.5 Session Info",
    "text": "9.5 Session Info\n\nqsave()\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Rocky Linux 8.7 (Green Obsidian)\n\nMatrix products: default\nBLAS/LAPACK: /nemo/lab/caladod/working/Matthew/.conda/envs/seurat5/lib/libopenblasp-r0.3.23.so;  LAPACK version 3.11.0\n\nlocale:\n [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    \n [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   \n [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/London\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    grid      stats     graphics  grDevices utils     datasets \n[8] methods   base     \n\nother attached packages:\n [1] scDblFinder_1.14.0          DoubletFinder_2.0.4        \n [3] BiocParallel_1.36.0         harmony_1.1.0              \n [5] Rcpp_1.0.11                 qs_0.26.3                  \n [7] viridis_0.6.4               viridisLite_0.4.2          \n [9] ggalluvial_0.12.5           ggnewscale_0.4.9           \n[11] ggrepel_0.9.4               UCell_2.4.0                \n[13] writexl_1.4.2               readxl_1.4.3               \n[15] wesanderson_0.3.6.9000      ComplexHeatmap_2.16.0      \n[17] cluster_2.1.4               lmtest_0.9-40              \n[19] zoo_1.8-12                  binaryLogic_0.3.9          \n[21] jaccard_0.1.0               RColorBrewer_1.1-3         \n[23] celda_1.16.1                Matrix_1.6-1               \n[25] SingleCellExperiment_1.24.0 SummarizedExperiment_1.32.0\n[27] Biobase_2.62.0              GenomicRanges_1.54.1       \n[29] GenomeInfoDb_1.38.0         IRanges_2.36.0             \n[31] S4Vectors_0.40.1            BiocGenerics_0.48.0        \n[33] MatrixGenerics_1.14.0       matrixStats_1.0.0          \n[35] ggpubr_0.6.0                rstatix_0.7.2              \n[37] gridExtra_2.3               scales_1.3.0               \n[39] clustree_0.5.0              ggraph_2.1.0               \n[41] cowplot_1.1.1               patchwork_1.2.0            \n[43] SeuratDisk_0.0.0.9021       tonsilref.SeuratData_2.0.0 \n[45] pbmcref.SeuratData_1.0.0    pbmc3k.SeuratData_3.1.4    \n[47] SeuratData_0.2.2.9001       Seurat_5.0.0               \n[49] SeuratObject_5.0.0          sp_2.1-1                   \n[51] lubridate_1.9.3             forcats_1.0.0              \n[53] stringr_1.5.0               dplyr_1.1.4                \n[55] purrr_1.0.2                 readr_2.1.4                \n[57] tidyr_1.3.0                 tibble_3.2.1               \n[59] ggplot2_3.5.1               tidyverse_2.0.0            \n[61] biomaRt_2.58.0             \n\nloaded via a namespace (and not attached):\n  [1] igraph_1.5.1               ica_1.0-3                 \n  [3] plotly_4.10.3              scater_1.28.0             \n  [5] zlibbioc_1.48.0            tidyselect_1.2.0          \n  [7] bit_4.0.5                  doParallel_1.0.17         \n  [9] clue_0.3-64                lattice_0.21-8            \n [11] rjson_0.2.21               blob_1.2.4                \n [13] S4Arrays_1.2.0             parallel_4.3.2            \n [15] png_0.1-8                  cli_3.6.1                 \n [17] goftest_1.2-3              BiocIO_1.12.0             \n [19] glmGamPoi_1.14.0           bluster_1.10.0            \n [21] BiocNeighbors_1.18.0       uwot_0.1.16               \n [23] curl_5.1.0                 mime_0.12                 \n [25] evaluate_0.23              leiden_0.4.3              \n [27] ggh4x_0.2.5                stringi_1.7.12            \n [29] backports_1.4.1            assertive.numbers_0.0-2   \n [31] XML_3.99-0.14              httpuv_1.6.12             \n [33] AnnotationDbi_1.64.0       magrittr_2.0.3            \n [35] rappdirs_0.3.3             splines_4.3.2             \n [37] RApiSerialize_0.1.2        sctransform_0.4.1         \n [39] ggbeeswarm_0.7.2           DBI_1.1.3                 \n [41] withr_2.5.2                xgboost_1.7.7.1           \n [43] assertive.base_0.0-9       tidygraph_1.2.3           \n [45] rtracklayer_1.62.0         htmlwidgets_1.6.2         \n [47] IRkernel_1.3.2             labeling_0.4.3            \n [49] SparseArray_1.2.0          cellranger_1.1.0          \n [51] reticulate_1.34.0          XVector_0.42.0            \n [53] RhpcBLASctl_0.23-42        timechange_0.2.0          \n [55] foreach_1.5.2              fansi_1.0.5               \n [57] data.table_1.14.8          RSpectra_0.16-1           \n [59] irlba_2.3.5.1              fastDummies_1.7.3         \n [61] gridGraphics_0.5-1         ellipsis_0.3.2            \n [63] lazyeval_0.2.2             yaml_2.3.7                \n [65] survival_3.5-7             scattermore_1.2           \n [67] crayon_1.5.2               RcppAnnoy_0.0.21          \n [69] IRdisplay_1.1              progressr_0.14.0          \n [71] tweenr_2.0.2               later_1.3.1               \n [73] ggridges_0.5.4             assertive.types_0.0-3     \n [75] codetools_0.2-19           base64enc_0.1-3           \n [77] GlobalOptions_0.1.2        KEGGREST_1.42.0           \n [79] Rtsne_0.16                 shape_1.4.6               \n [81] limma_3.56.2               Rsamtools_2.18.0          \n [83] filelock_1.0.2             pkgconfig_2.0.3           \n [85] xml2_1.3.5                 GenomicAlignments_1.38.0  \n [87] spatstat.sparse_3.0-3      multipanelfigure_2.1.2    \n [89] xtable_1.8-4               car_3.1-2                 \n [91] plyr_1.8.9                 httr_1.4.7                \n [93] tools_4.3.2                globals_0.16.2            \n [95] checkmate_2.2.0            beeswarm_0.4.0            \n [97] broom_1.0.5                nlme_3.1-163              \n [99] dbplyr_2.4.0               hdf5r_1.3.8               \n[101] digest_0.6.33              farver_2.1.1              \n[103] tzdb_0.4.0                 reshape2_1.4.4            \n[105] WriteXLS_6.4.0             glue_1.6.2                \n[107] cachem_1.0.8               BiocFileCache_2.10.1      \n[109] polyclip_1.10-6            generics_0.1.3            \n[111] Biostrings_2.70.1          presto_1.0.0              \n[113] parallelly_1.36.0          statmod_1.5.0             \n[115] RcppHNSW_0.5.0             ScaledMatrix_1.8.1        \n[117] carData_3.0-5              pbapply_1.7-2             \n[119] assertive.properties_0.0-5 spam_2.10-0               \n[121] dqrng_0.3.1                utf8_1.2.4                \n[123] assertive.files_0.0-2      graphlayouts_1.0.0        \n[125] ggsignif_0.6.4             RcppEigen_0.3.3.9.3       \n[127] shiny_1.7.5.1              GenomeInfoDbData_1.2.11   \n[129] RCurl_1.98-1.12            memoise_2.0.1             \n[131] future_1.33.0              RANN_2.6.1                \n[133] stringfish_0.16.0          spatstat.data_3.0-3       \n[135] spatstat.utils_3.0-5       hms_1.1.3                 \n[137] fitdistrplus_1.1-11        munsell_0.5.0             \n[139] colorspace_2.1-0           rlang_1.1.3               \n[141] DelayedMatrixStats_1.24.0  sparseMatrixStats_1.14.0  \n[143] dotCall64_1.1-0            ggforce_0.4.1             \n[145] circlize_0.4.15            scuttle_1.10.3            \n[147] iterators_1.0.14           abind_1.4-5               \n[149] MCMCprecision_0.4.0        repr_1.1.6                \n[151] bitops_1.0-7               promises_1.2.1            \n[153] RSQLite_2.3.2              qvalue_2.32.0             \n[155] DelayedArray_0.28.0        pbdZMQ_0.3-9              \n[157] compiler_4.3.2             prettyunits_1.2.0         \n[159] beachmat_2.18.0            listenv_0.9.0             \n[161] enrichR_3.2                edgeR_3.42.4              \n[163] BiocSingular_1.16.0        tensor_1.5                \n[165] MASS_7.3-60                progress_1.2.2            \n[167] uuid_1.1-1                 spatstat.random_3.2-1     \n[169] R6_2.5.1                   fastmap_1.1.1             \n[171] vipor_0.4.5                ROCR_1.0-11               \n[173] rsvd_1.0.5                 gtable_0.3.4              \n[175] KernSmooth_2.23-22         miniUI_0.1.1.1            \n[177] deldir_1.0-9               htmltools_0.5.6.1         \n[179] RcppParallel_5.1.7         bit64_4.0.5               \n[181] spatstat.explore_3.2-5     lifecycle_1.0.3           \n[183] restfulr_0.0.15            vctrs_0.6.4               \n[185] isoband_0.2.7              spatstat.geom_3.2-7       \n[187] scran_1.28.2               future.apply_1.11.0       \n[189] pillar_1.9.0               magick_2.8.1              \n[191] metapod_1.8.0              locfit_1.5-9.8            \n[193] combinat_0.0-8             jsonlite_1.8.7            \n[195] GetoptLong_1.0.5",
    "crumbs": [
      "**Chapter 2 : Cell Classification**\n",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>SCTransform</span>"
    ]
  }
]